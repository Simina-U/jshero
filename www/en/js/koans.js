if(typeof jshero==="undefined"){var jshero={}}jshero.koans=function(){var index=0;var koans=[];var koansMap={};var add=function(koan){koans.push(koan);koansMap[koan.id]=koan};var getById=function(koanId){return koansMap[koanId]};var initReorder=function(order){if(order.length!==koans.length){console.log("ERROR: Koans-Order-Array length unequal to Koans length!")}var koan;koans=[];for(var i=0,l=order.length;i<l;i++){koan=koansMap[order[i]];if(koan!=null){koans.push(koan)}else{console.log("ERROR: No koan for koan-Id in koansMap!")}}};var getKoans=function(){return koans};return{add:add,initReorder:initReorder,getKoans:getKoans,getById:getById}}();if(typeof module!=="undefined"){module.exports=jshero.koans}
jshero.koans.add({id:'arguments',title:'The arguments object',lesson:'Inside every function an <code>arguments</code> object is accessible. \nIt is an Array-like object that contains the values of the arguments passed to the function.\n\n<pre><code>var add = function() {\n  var arg0 = arguments[0];\n  var arg1 = arguments[1];\n  return arg0 + arg1;\n};\n\nvar sum = add(1, 2);</code></pre>\n\n<code>add</code> is called with arguments <code>1</code> and <code>2</code>.\nSo <code>arguments[0]</code> contains the value <code>1</code> and <code>arguments[1]</code> contains the value\n<code>2</code>.<br><br>\nWith the <code>arguments</code> object you can access the passed arguments without parameters.\nThis is useful, for example, if you want to write a function that processes an arbitrary number of arguments. \n\n<pre><code>var add = function() {\n  var sum = 0;\n  for (var i = 0; i < arguments.length; i++) {\n    sum = sum + arguments[i];\n  }\n  return sum;\n};\n\nvar s1 = add(2, 4);\nvar s2 = add(2, 3, 5, 7);</code></pre>\n\nWe iterate over all passed arguments and sum them up.\nThereby <code>arguments.length</code> returns the number of passed arguments.\nNow we can call <code>add</code> with an arbitrary number of arguments.',task:'Write a function <code>max</code> that calculates the maximum of an arbitrary number of numbers.\n<code>max(1, 2)</code> should return <code>2</code> and <code>max(2, 3, 1)</code> should return <code>3</code>.',tests:[function(){return jshero.testutil.assert_isFunction('max')},function(){return jshero.testutil.assert_functionReturns('max(1)',1)},function(){return jshero.testutil.assert_functionReturns('max(15, 2)',15)},function(){return jshero.testutil.assert_functionReturns('max(1, 15, 3)',15)},function(){return jshero.testutil.assert_functionReturns('max(-1, 0, 9, 8)',9)}]});
jshero.koans.add({id:'array',title:'Creating arrays',lesson:'Arrays are objects for storing multiple values. Arrays are preferably created with square brackets.\n\n<pre><code>var languages = [\'C\', \'C++\', \'Java\'];\nvar primes = [2, 3, 5, 7, 11];\nvar emptyArray = [];\nvar a = \'Douglas\';\nvar b = 12;\nvar c = true;\nvar someValues = [a, b, c];</code></pre>',task:'Write a function <code>toArray</code> that takes 2 values and returns these values in an array.\n<code>toArray(5,&nbsp;9)</code> should return the array <code>[5,&nbsp;9]</code>.',tests:[function(){return jshero.testutil.assert_isFunction('toArray')},function(){return jshero.testutil.assert_functionHasNumOfParameter('toArray',2)},function(){return jshero.testutil.assert_functionReturnsType('toArray(1, 2)','Array')},function(){return jshero.testutil.assert_functionReturns('toArray(1, 2)',[1,2])},function(){return jshero.testutil.assert_functionReturns('toArray(\'Tom\', \'Huck\')',['Tom','Huck'])}]});
jshero.koans.add({id:'array2',title:'Get array elements',lesson:'The elements of an array are accessed by an index beginning with 0.\n\n<pre><code>var languages = [\'C\', \'C++\', \'Java\'];\nvar c = languages[0];\nvar cPlusPlus = languages[1];\nvar java = languages[2];</code></pre>',task:'Write a function <code>getFirstElement</code> that takes an array and returns the first element of the array.\n<code>getFirstElement([1, 2])</code> should return <code>1</code>.',tests:[function(){return jshero.testutil.assert_isFunction('getFirstElement')},function(){return jshero.testutil.assert_functionHasNumOfParameter('getFirstElement',1)},function(){return jshero.testutil.assert_functionReturns('getFirstElement([1, 2])',1)},function(){return jshero.testutil.assert_functionReturns('getFirstElement([\'Firefox\', \'Chrome\'])','Firefox')}]});
jshero.koans.add({id:'array3',title:'Set array elements',lesson:'Just as you can get array elements by an index, you can set them by this index.\nIt does not matter whether the array was previously filled or empty.\n\n<pre><code>var languages = [];\nlanguages[0] = \'C\';\nlanguages[1] = \'C++\';\nlanguages[2] = \'Java\';</code></pre>\n\nHere an empty array is filled successively with the listed values.',task:'Write a function <code>setFirstElement</code> that takes an array and an arbitrary variable.\nThe variable should be inserted as the first element in the array. The array should be returned.\n<code>setFirstElement([1, 2], 3)</code> should return <code>[3, 2]</code>.',tests:[function(){return jshero.testutil.assert_isFunction('setFirstElement')},function(){return jshero.testutil.assert_functionHasNumOfParameter('setFirstElement',2)},function(){return jshero.testutil.assert_functionReturns('setFirstElement([1, 2], 3)',[3,2])},function(){return jshero.testutil.assert_functionReturns('setFirstElement([], 1)',[1])},function(){return jshero.testutil.assert_functionReturns('setFirstElement([\'a\', \'b\', \'c\'], \'x\')',['x','b','c'])}]});
jshero.koans.add({id:'arrayindexof',title:'Array: indexOf()',lesson:'The <code>indexOf</code> method returns the first index at which a given element can be found in the array,\nor -1 if it is not present. Counting starts with 0.\n\n<pre><code>var systems = [\'Debian\', \'Ubuntu\', \'Mint\'];\nvar i1 = systems.indexOf(\'Mint\');\nvar i2 = systems.indexOf(\'Windows\');</code></pre>\n\n<code>i1</code> gets the value <code>2</code> and <code>i2</code> gets the value <code>-1</code>.\nFor a complete reference see\n<a href=\'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\'>\nMDN&nbsp;web&nbsp;docs</a>.',task:'Write a function <code>add</code> that adds an element to the end of an array.\nHowever, the element should only be added if it is not already in the array.\n<code>add([1, 2], 3)</code> should return <code>[1, 2, 3]</code> and <code>add([1, 2], 2)</code> should return\n<code>[1, 2]</code>.',tests:[function(){return jshero.testutil.assert_isFunction('add')},function(){return jshero.testutil.assert_functionHasNumOfParameter('add',2)},function(){return jshero.testutil.assert_functionReturns('add([\'J\'], \'S\')',['J','S'])},function(){return jshero.testutil.assert_functionReturns('add([\'J\'], \'J\')',['J'])},function(){return jshero.testutil.assert_functionReturns('add([1, 2], 3)',[1,2,3])},function(){return jshero.testutil.assert_functionReturns('add([1, 2], 2)',[1,2])}]});
(function(testutil){jshero.koans.add({id:'arraylength',title:'Array: length',lesson:'Like strings, arrays have the property <code>length</code>. Here it returns the number of elements in the array:\n\n<pre><code>var languages = [];\nvar len0 = languages.length;\nlanguages[0] = \'C\';\nvar len1 = languages.length;\nlanguages[1] = \'C++\';\nvar len2 = languages.length;</code></pre>\n\nThe empty array contains no elements. <code>len0</code> is <code>0</code>.\nNow we fill the array step by step. <code>len1</code> is <code>1</code> and <code>len2</code> is <code>2</code>.',task:'Write a function <code>getLastElement</code> that takes an array and returns the last element of the array.\n<code>getLastElement([1, 2])</code> should return <code>2</code>.',tests:[function(){return testutil.assert_isFunction('getLastElement')},function(){return testutil.assert_functionHasNumOfParameter('getLastElement',1)},function(){return testutil.assert_functionReturns('getLastElement([1, 2])',2)},function(){return testutil.assert_functionReturns('getLastElement([\'a\', \'b\', \'c\'])','c')}]})})(jshero.testutil);
jshero.koans.add({id:'arraypush',title:'Array: shift() and push()',lesson:'Like strings, arrays have several methods. Two of these methods are <code>shift</code> and <code>push</code>.\nTo remind you: Methods are functions that are applied to an object, here an array. Methods are appended with a point to the object.\n<br><br>\nThe array method <code>shift</code> removes the first element from an array and returns that element.\nThe length of the array is reduced by 1.\n\n<pre><code>var languages = [\'C\', \'Java\', \'JavaScript\'];\nvar firstLanguage = languages.shift();</code></pre>\n\nThe array <code>languages</code> is created with 3 programming languages.\nAfter <code>shift</code> the array <code>languages</code> contains only 2 items,\nviz. <code>[\'Java\', \'JavaScript\']</code>. The value <code>\'C\'</code> is stored in <code>firstLanguage</code>.\n<br><br>\nThe method <code>push</code> adds a new element to an array.\nThe new element is passed as a parameter and is added to the end of the array.\n\n<pre><code>var languages = [];\nlanguages.push(\'C\');\nlanguages.push(\'Java\');\nlanguages.push(\'JavaScript\');</code></pre>\n\nHere an empty array is filled successively with the passed values.\nFinally we get the array <code>[\'C\', \'Java\', \'JavaScript\']</code>.',task:'Write a function <code>rotate</code> that rotates the elements of an array.\nAll elements should be moved one position to the left.\nThe 0th element should be placed at the end of the array. The rotated array should be returned.\n<code>rotate([\'a\', \'b\', \'c\'])</code> should return <code>[\'b\', \'c\', \'a\']</code>.',tests:[function(){return jshero.testutil.assert_isFunction('rotate')},function(){return jshero.testutil.assert_functionHasNumOfParameter('rotate',1)},function(){return jshero.testutil.assert_functionReturns('rotate([1, 2])',[2,1])},function(){return jshero.testutil.assert_functionReturns('rotate([\'a\', \'b\', \'c\'])',['b','c','a'])},function(){return jshero.testutil.assert_functionReturns('rotate([1, \'b\', \'c\', 37])',['b','c',37,1])}]});
jshero.koans.add({id:'arraysort',title:'Sorting arrays',lesson:'Now we can sort arrays with given length.',task:'Write a function <code>sort</code> that takes an array filled with 3 numbers and returns these 3 numbers sorted in ascending order as an array.\n<code>sort([2,&nbsp;3,&nbsp;1])</code> should return <code>[1,&nbsp;2,&nbsp;3]</code>.',tests:[function(){return jshero.testutil.assert_isFunction('sort')},function(){return jshero.testutil.assert_functionHasNumOfParameter('sort',1)},function(){return jshero.testutil.assert_functionReturns('sort([1, 2, 3])',[1,2,3])},function(){return jshero.testutil.assert_functionReturns('sort([1, 3, 2])',[1,2,3])},function(){return jshero.testutil.assert_functionReturns('sort([2, 1, 3])',[1,2,3])},function(){return jshero.testutil.assert_functionReturns('sort([2, 3, 1])',[1,2,3])},function(){return jshero.testutil.assert_functionReturns('sort([3, 1, 2])',[1,2,3])},function(){return jshero.testutil.assert_functionReturns('sort([3, 2, 1])',[1,2,3])}]});
jshero.koans.add({id:'bool',title:'Boolean',lesson:'Another important data type next to String and Number is Boolean. It has only two possible values:\n<code>true</code> and <code>false</code>. You can calculate with Boolean values similar to numbers. JavaScript\nhas three Boolean operators: <code>&&</code> (and), <code>||</code> (or) and <code>!</code> (not).\n<code>&&</code> links two Boolean values. If both values are <code>true</code>, the result is <code>true</code>.\nIn all other cases it is <code>false</code>. With <code>||</code> the result is <code>true</code>,\nif at least one of the two input values is <code>true</code>. If both input values are <code>false</code>,\nthe result is <code>false</code>. <code>!</code> is applied to a single Boolean value and inverts this value:\n<code>!true</code> is <code>false</code> and <code>!false</code> is <code>true</code>.\n\n<pre><code>var x1 = true && false;\nvar x2 = !x1;\nvar x3 = x1 || x2;</code></pre>\n\n<code>x1</code> is <code>false</code>, <code>x2</code> is <code>true</code> and <code>x3</code> is <code>true</code>.',task:'Write a function <code>nand</code> that takes two Boolean values. If both values are <code>true</code>,\nthe result should be <code>false</code>. In the other cases the return should be <code>true</code>.\nThe call <code>nand(true, true)</code> should return <code>false</code>. The calls <code>nand(true, false)</code>,\n<code>nand(false, true)</code> and <code>nand(false, false)</code> should return <code>true</code>.',hint:'<pre><code>var nand = function(a, b) {\n  var and = a && b;\n  ...\n};</code></pre>',solution:'<pre><code>var nand = function(a, b) {\n  var and = a && b;\n  return !and;\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('nand')},function(){return jshero.testutil.assert_functionHasNumOfParameter('nand',2)},function(){return jshero.testutil.assert_functionReturns('nand(true, true)',false)},function(){return jshero.testutil.assert_functionReturns('nand(true, false)',true)},function(){return jshero.testutil.assert_functionReturns('nand(false, true)',true)},function(){return jshero.testutil.assert_functionReturns('nand(false, false)',true)}]});
jshero.koans.add({id:'break',title:'break and continue',lesson:'<code>break</code> terminates the current loop. The program continues after the loop.\n\n<pre><code>var words = \'blue white red\';\nvar indexFirstSpace = -1;\nfor (var i = 0; i < words.length; i++) {\n  if (words.charAt(i) === \' \') {\n    indexFirstSpace = i;\n    break;\n  }\n}</code></pre>\n\nIf the character with the index <code>i</code> in <code>words</code> is a space, the <code>if</code> condition is fulfilled. \n<code>indexFirstSpace</code> gets the value of the loop variable <code>i</code>. Now, <code>break</code> will be\nexecuted. The loop will be terminated and the program execution continues after the loop.<br><br>\n\n<code>continue</code> terminates the current loop iteration. The program execution jumps to the loop head.\n\n<pre><code>var sum = 0;\nfor (var i = 0; i < 10; i++) {\n  if (i % 2 === 0) {\n    continue;\n  }\n  sum = sum + i;\n}</code></pre>\n\nIf <code>i</code> is an odd number, the following applies: i modulo 2 = 1. The <code>if</code> condition is not fulfilled. \nCode execution continues after <code>if</code> and <code>i</code> is added to <code>sum</code>. \nIf <code>i</code> is an even number, the following applies: i modulo 2 = 0. The <code>if</code> condition is fulfilled and \n<code>continue</code> will be excecuted. The code execution jumps directly to the loop head.\n<code>i</code> is not added to <code>sum</code>. So all odd numbers smaller than 10 are added up.<br><br>\n\n<code>break</code> and <code>continue</code> can be used in all loops (for, while, do...while).',task:'Write a function <code>isPrime</code> that checks whether a passed number is\n<a href="https://en.wikipedia.org/wiki/Prime_number">prime</a>.\nIn case of a prime number it should return <code>true</code>, otherwise <code>false</code>.\nThe call <code>isPrime(2)</code> should return <code>true</code> and <code>isPrime(4)</code> should return\n<code>false</code>.',tests:[function(){return jshero.testutil.assert_isFunction('isPrime')},function(){return jshero.testutil.assert_functionHasNumOfParameter('isPrime',1)},function(){return jshero.testutil.assert_functionReturns('isPrime(1)',false)},function(){return jshero.testutil.assert_functionReturns('isPrime(2)',true)},function(){return jshero.testutil.assert_functionReturns('isPrime(3)',true)},function(){return jshero.testutil.assert_functionReturns('isPrime(4)',false)},function(){return jshero.testutil.assert_functionReturns('isPrime(11)',true)},function(){return jshero.testutil.assert_functionReturns('isPrime(281)',true)},function(){return jshero.testutil.assert_functionReturns('isPrime(351)',false)}]});
jshero.koans.add({id:'comment',title:'Comments',lesson:'If needed, you can add comments to a program. Comments are used to explain programs.\nThey help us humans to understand programs. Computers ignore comments.<br><br>\nIn JavaScript there are two ways to write comments:\nLine comments are introduced with <code>//</code> and are valid until the end of the line.\nBlock comments start with <code>/*</code> and end with <code>*/</code>.\nAny text in between is a comment.\n\n<pre><code>// That\'s a line comment.\n\n// This line comment\n// covers 2 lines.\n\n/* That\'s a block comment. */\n\n/* This line comment\ncovers 2 lines. */\n\n/**\n * This is also a block comment.\n * The additional stars between\n * the beginning and the end of the\n * block comment are only for decoration.\n */</code></pre>\n\n Block comments are often used to explain functions. Line comments explain the code flow.\n\n <pre><code>/**\n * Checks whether a string contains\n * any characters other than spaces.\n */\nvar isEmpty = function(string) {\n  // The method trim() removes spaces at \n  // the beginning and the end of a string.\n  var trimmedString = string.trim();\n  return trimmedString.length === 0;\n};</code></pre>\n\nComments can\'t be checked with the tests used here.\nIt follows a task where you have to apply much of what you have learned so far.',task:'Write a function <code>median</code> that takes an array of ascending numbers and returns the\n<a href=\'https://en.wikipedia.org/wiki/Median\'>median</a> of that numbers.\n<code>median([1, 2, 10])</code> should return <code>2</code> and <code>median([1, 2, 10, 100])</code> should return\n<code>6</code>.',hint:'The median of a sorted series of numbers is the value in the middle.\nIf the number of values is even, the median is the mean of the two middle numbers.',tests:[function(){return jshero.testutil.assert_isFunction('median')},function(){return jshero.testutil.assert_functionHasNumOfParameter('median',1)},function(){return jshero.testutil.assert_functionReturns('median([1])',1)},function(){return jshero.testutil.assert_functionReturns('median([1, 2])',1.5)},function(){return jshero.testutil.assert_functionReturns('median([1, 2, 10])',2)},function(){return jshero.testutil.assert_functionReturns('median([1, 1, 2, 10, 100, 101])',6)}]});
jshero.koans.add({id:'concat',title:'Array: concat()',lesson:'Using the <code>concat</code> method you can concatenate two arrays:\n\n<pre><code>var a1 = [1, 2, 3];\nvar a2 = [4, 5, 6];\nvar a3 = a1.concat(a2);</code></pre>\n\n<code>a3</code> contains the array <code>[1, 2, 3, 4, 5, 6]</code>.\nThe two existing arrays <code>a1</code> and <code>a2</code> will not be changed.',task:'Write a function <code>concatUp</code> that concatenate two arrays.\nThe longer array should be appended to the shorter array.\nIf both arrays are equally long, the second array should be appended to the first array.\n<code>concatUp([1, 2], [3])</code> should return <code>[3, 1, 2]</code>\nand <code>concatUp([5, 7], [6, 8])</code> should return <code>[5, 7, 6, 8]</code>.',tests:[function(){return jshero.testutil.assert_isFunction('concatUp')},function(){return jshero.testutil.assert_functionHasNumOfParameter('concatUp',2)},function(){return jshero.testutil.assert_functionReturns('concatUp([5, 7], [6])',[6,5,7])},function(){return jshero.testutil.assert_functionReturns('concatUp([\'x\'], [\'a\', \'b\'])',['x','a','b'])},function(){return jshero.testutil.assert_functionReturns('concatUp([5, 7], [6, 8])',[5,7,6,8])}]});
(function(testutil){jshero.koans.add({id:'dimarray',title:'Array of arrays',lesson:'So far we have stored numbers, strings and boolean values in arrays.\nBut you can also store arrays in arrays:\n\n<pre><code>var teams = [\n  [\'Ruby\', \'Angel\'],\n  [\'Mia\', \'Yui\', \'Merve\', \'Elif\'],\n  [\'Saanvi\', \'Giulia\', \'Zeynep\']\n];\n\nvar row1 = [4, 9, 2];\nvar row2 = [3, 5, 7];\nvar row3 = [8, 1, 6];\nvar loshu = [row1, row2, row3];</code></pre>\n\nIn the first example, 3 teams are stored in an array. Each team itself is an array of names.\nThe individual teams have different sizes. With <pre><code>var team = teams[0];</code></pre> you can access a team and\nwith <pre><code>var member = teams[0][0];</code></pre> you can access an individual team member.<br><br>\nArrays that contain arrays are also called two-dimensional arrays.\nCarrying this on, you get three- or multidimensional arrays.<br><br>\nIn the second example, the <a href=\'https://en.wikipedia.org/wiki/Lo_Shu_Square\'>Lo Shu Square</a>\nis stored in a two-dimensional array.',task:'Write a function <code>flat</code> that flattens a two-dimensional array with 3 entries.\n<code>flat(loshu)</code> should return <code>[4, 9, 2, 3, 5, 7, 8, 1, 6]</code>.\nThereby <code>loshu</code> is the magic square from the example above.',tests:[function(){return testutil.assert_isFunction('flat')},function(){return testutil.assert_functionHasNumOfParameter('flat',1)},function(){return testutil.assert_functionReturns('flat([[], [], []])',[])},function(){return testutil.assert_functionReturns('flat([[1], [], []])',[1])},function(){return testutil.assert_functionReturns('flat([[1], [2], [3]])',[1,2,3])},function(){return testutil.assert_functionReturns('flat([[1, 2], [3, 4], [5, 6]])',[1,2,3,4,5,6])},function(){return testutil.assert_functionReturns('flat([[\'a\'], [\'b\', \'c\'], [\'d\', \'e\', \'f\']])',['a','b','c','d','e','f'])}]})})(jshero.testutil);
jshero.koans.add({id:'doubleloop',title:'Nested loops',lesson:'Loops can be nested into each other. In case of a <code>for</code> loop you have to use two different\nloop variables.\n\n<pre><code>var a = [[1, 7, 3], [2, 8, 5], [9, 0, 4]];\nvar sum = 0;\nfor (var i = 0; i < 3; i++) {\n  for (var j = 0; j < 3; j++) {\n    sum = sum + a[i][j];\n  }\n}</code></pre>\n\nThe code snippet calculates the sum of all elements of a two-dimensional array.',task:'Write a function <code>sum</code> that calculates the sum of all elements of a two-dimensional array.\n<code>sum([[1, 2], [3]])</code> should return <code>6</code>.',tests:[function(){return jshero.testutil.assert_isFunction('sum')},function(){return jshero.testutil.assert_functionHasNumOfParameter('sum',1)},function(){return jshero.testutil.assert_functionReturns('sum([[1]])',1)},function(){return jshero.testutil.assert_functionReturns('sum([[1, 2], [3]])',6)},function(){return jshero.testutil.assert_functionReturns('sum([[1, 2, 3], [1, 2], [1, 2, 3, 4]])',19)}]});
jshero.koans.add({id:'dowhile',title:'do...while loop',lesson:'The <code>do...while</code> loop works similarly to the <code>while</code> loop.\nThe loop code is executed as long as the loop condition results in <code>true</code>.\nThe only difference is that the loop condition is checked after the loop code.\nThis ensures that the loop code is run through at least once.\n\n<pre><code>var threeX = \'\';\ndo {\n  threeX = threeX + \'x\';\n} while (threeX.length < 3);</code></pre>\n\nAfter the loop <code>threeX</code> has the value <code>\'xxx\'</code>.',task:'Write a function <code>lcm</code> that takes two natural numbers and calculates their\n<a href=\'https://en.wikipedia.org/wiki/Least_common_multiple\'>least common multiple (lcm)</a>.\nThe lcm of two natural numbers a und b is the smallest natural number that is divisible by a and b.\n<code>lcm(4, 6)</code> should return <code>12</code>.',tests:[function(){return jshero.testutil.assert_isFunction('lcm')},function(){return jshero.testutil.assert_functionHasNumOfParameter('lcm',2)},function(){return jshero.testutil.assert_functionReturns('lcm(1, 1)',1)},function(){return jshero.testutil.assert_functionReturns('lcm(1, 2)',2)},function(){return jshero.testutil.assert_functionReturns('lcm(2, 3)',6)},function(){return jshero.testutil.assert_functionReturns('lcm(3, 2)',6)},function(){return jshero.testutil.assert_functionReturns('lcm(4, 6)',12)},function(){return jshero.testutil.assert_functionReturns('lcm(5, 7)',35)},function(){return jshero.testutil.assert_functionReturns('lcm(6, 8)',24)},function(){return jshero.testutil.assert_functionReturns('lcm(10, 20)',20)},function(){return jshero.testutil.assert_functionReturns('lcm(20, 10)',20)}]});
jshero.koans.add({id:'else',title:'if...else',lesson:'If a code block should be executed if an <code>if</code> condition\nis not fulfilled, an <code>else</code> is added.\n\n<pre><code>var message;\nif (amount > 1000) {\n  message = \'No payout possible!\';\n} else {\n  message = \'The amount will be paid out!\';\n}</code></pre>\n\nDepending on whether <code>amount</code> is greater or smaller <code>1000</code>,\neither the <code>if</code> branch or the <code>else</code> branch is executed.',task:'Write a function <code>addWithSurcharge</code> that adds two amounts with surcharge.\nFor each amount less than or equal to <code>10</code>, the surcharge is <code>1</code>.\nFor each amount greater than <code>10</code>, the surcharge is <code>2</code>.\nThe call <code>addWithSurcharge(5, 15)</code> should return <code>23</code>.',tests:[function(){return jshero.testutil.assert_isFunction('addWithSurcharge')},function(){return jshero.testutil.assert_functionHasNumOfParameter('addWithSurcharge',2)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(1, 1)',4)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(10, 10)',22)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(11, 10)',24)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(10, 11)',24)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(11, 11)',26)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(15, 27)',46)}]});
jshero.koans.add({id:'elseif',title:'else if',lesson:'If you want to distinguish multiple cases, you can supplement an <code>if</code> with any number of\n<code>else if</code>. Finally, a single <code>else</code> can be added.\n\n<pre><code>var message;\nif (amount > 1000) {\n  message = \'Too high. No payout possible!\';\n} else if (amount < 10) {\n  message = \'Too low. No payout possible!\';\n} else {\n  message = \'The amount will be paid out!\';\n}</code></pre>\n\nFirst it is checked whether <code>amount</code> is greater than <code>1000</code>.\nIf so, the \'Too high ...\' message is set and the code will be continued at the end of the entire block.\nIf not, it is checked whether <code>amount</code> is less than <code>10</code>.\nIf so, the \'Too low ...\' message is set and the code will be continued at the end of the entire block.\nIf no condition is met, the final <code>else</code> block is executed.',task:'Write a function <code>addWithSurcharge</code> that adds two amounts with surcharge.\nFor each amount less than or equal to <code>10</code>, the surcharge is <code>1</code>.\nFor each amount greater than <code>10</code> and less than or equal to <code>20</code>, the surcharge is <code>2</code>.\nFor each amount greater than <code>20</code>, the surcharge is <code>3</code>.\nThe call <code>addWithSurcharge(10, 30)</code> should return <code>44</code>.',tests:[function(){return jshero.testutil.assert_isFunction('addWithSurcharge')},function(){return jshero.testutil.assert_functionHasNumOfParameter('addWithSurcharge',2)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(1, 1)',4)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(10, 9)',21)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(11, 10)',24)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(10, 11)',24)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(13, 20)',37)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(20, 13)',37)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(15, 27)',47)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(27, 15)',47)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(25, 5)',34)},function(){return jshero.testutil.assert_functionReturns('addWithSurcharge(5, 25)',34)}]});
jshero.koans.add({id:'equals',title:'Strict equality',lesson:'Two values can be checked for strict equality. The result of such a comparison is either <code>true</code>,\nthe two values are equal, or <code>false</code>, the two values are not equal. The operator for strict equality\nis&nbsp;<code>===</code>.\n\n<pre><code>var language = \'JavaScript\';\nvar x = 10;\nvar c1 = language === \'Java\';\nvar c2 = x === 10;\nvar c3 = x === \'10\';</code></pre>\n\nThe first comparison results in <code>false</code>, because <code>language</code> does not have the value\n<code>\'Java\'</code>. So <code>c1</code> is <code>false</code>. The second comparison results in <code>true</code>,\nbecause the value of <code>x</code> equals <code>10</code>. So <code>c2</code> is <code>true</code>.\nIn the case of strict equality, it is also important that the two compared values have the same data type.\n<code>c3</code> is <code>false</code>, because different data types are compared here.\nOn the left side of the comparison is a number, on the right side a string.',task:'Write a function <code>equals</code> that checks two values for strict equality. <code>equals(1, 1)</code>\nshould return <code>true</code> and <code>equals(1, 2)</code> should return <code>false</code>.',hint:'<pre><code>var equals = function(a, b) {\n  return ...\n};</code></pre>',solution:'<pre><code>var equals = function(a, b) {\n  return a === b;\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('equals')},function(){return jshero.testutil.assert_functionHasNumOfParameter('equals',2)},function(){return jshero.testutil.assert_functionReturns('equals(1, 1)',true)},function(){return jshero.testutil.assert_functionReturns('equals(1, \'1\')',false)},function(){return jshero.testutil.assert_functionReturns('equals(1, 2)',false)},function(){return jshero.testutil.assert_functionReturns('equals(\'sun\', \'sun\')',true)},function(){return jshero.testutil.assert_functionReturns('equals(\'left\', \'right\')',false)}]});
jshero.koans.add({id:'equals2',title:'Three identical values',lesson:'The following task can be solved by an interaction of strict equality and a Boolean operator.',task:'Write a function <code>equals</code> that checks 3 values for strict equality.\nThe function should only return <code>true</code> if all 3 values are equal.\n<code>equals(1, 1, 1)</code> should return <code>true</code> and\n<code>equals(1, 2, 1)</code> should return <code>false</code>.',tests:[function(){return jshero.testutil.assert_isFunction('equals')},function(){return jshero.testutil.assert_functionHasNumOfParameter('equals',3)},function(){return jshero.testutil.assert_functionReturns('equals(1, 1, 1)',true)},function(){return jshero.testutil.assert_functionReturns('equals(\'1\', 1, 1)',false)},function(){return jshero.testutil.assert_functionReturns('equals(1, \'1\', 1)',false)},function(){return jshero.testutil.assert_functionReturns('equals(1, 1, \'1\')',false)},function(){return jshero.testutil.assert_functionReturns('equals(\'A\', \'B\', \'C\')',false)}]});
jshero.koans.add({id:'even',title:'Even numbers',lesson:'The following task can be solved by an interaction of strict equality and the modulo operator.',task:'Write a function <code>isEven</code> that checks if a passed number is even.\nIf the given number is even, <code>true</code> should be returned, otherwise <code>false</code>.\nThe call <code>isEven(2)</code> should return <code>true</code> and\n<code>isEven(3)</code> should return <code>false</code>.',tests:[function(){return jshero.testutil.assert_isFunction('isEven')},function(){return jshero.testutil.assert_functionHasNumOfParameter('isEven',1)},function(){return jshero.testutil.assert_functionReturns('isEven(0)',true)},function(){return jshero.testutil.assert_functionReturns('isEven(1)',false)},function(){return jshero.testutil.assert_functionReturns('isEven(2)',true)},function(){return jshero.testutil.assert_functionReturns('isEven(37)',false)},function(){return jshero.testutil.assert_functionReturns('isEven(208)',true)}]});
(function(testutil){jshero.koans.add({id:'factorial',title:'Factorial',lesson:'Let us practice the <code>for</code> loop with the\n<a href=\'https://en.wikipedia.org/wiki/Factorial\'>factorial</a> used in mathematics.\nThe factorial of a positive integer n, denoted by n!, is the product of all positive integers less than or equal to n.\nFor example, 3! = 1*2*3 = 6. By definition, 0! = 1.',task:'Write a function <code>factorial</code> that calculates the factorial of a positive integer.\n<code>factorial(3)</code> should return <code>6</code>.',hint:'<pre><code>var factorial = function(n) {\n      var result = 1;\n      for (...) {\n        ...\n      }\n      return result;\n    };</pre></code>',solution:'<pre><code>var factorial = function(n) {\n  var result = 1;\n  for (var i = 1; i <= n; i++) {\n    result = result * i;\n  }\n  return result;\n};</pre></code>',tests:[function(){return testutil.assert_isFunction('factorial')},function(){return testutil.assert_functionHasNumOfParameter('factorial',1)},function(){return testutil.assert_functionReturns('factorial(0)',1)},function(){return testutil.assert_functionReturns('factorial(1)',1)},function(){return testutil.assert_functionReturns('factorial(2)',2)},function(){return testutil.assert_functionReturns('factorial(3)',6)},function(){return testutil.assert_functionReturns('factorial(4)',24)},function(){return testutil.assert_functionReturns('factorial(9)',362880)}]})})(jshero.testutil);
jshero.koans.add({id:'fahrenheit',title:'Fahrenheit',lesson:'The following task is taken from the <a href=\'https://www.freecodecamp.org\'>freeCodeCamp</a>.',task:'Write a function <code>toFahrenheit</code> that converts a temperature from <a href=\'https://en.wikipedia.org/wiki/Celsius\'>Celsius</a>\nto <a href=\'https://en.wikipedia.org/wiki/Fahrenheit\'>Fahrenheit</a>. If C is the temperature in Celsius and\nF the temperature in Fahrenheit, the following applies: F = 1.8 * C + 32. <code>toFahrenheit(0)</code> should return <code>32</code>.',hint:'<pre><code>var toFahrenheit = function(celsius) {\n  return ...\n};</code></pre>',solution:'<pre><code>var toFahrenheit = function(celsius) {\n  return 1.8 * celsius + 32;\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('toFahrenheit')},function(){return jshero.testutil.assert_functionHasNumOfParameter('toFahrenheit',1)},function(){return jshero.testutil.assert_functionReturns('toFahrenheit(0)',32)},function(){return jshero.testutil.assert_functionReturns('toFahrenheit(10)',50)},function(){return jshero.testutil.assert_functionReturns('toFahrenheit(40)',104)},function(){return jshero.testutil.assert_functionReturns('toFahrenheit(100)',212)}]});
(function(testutil){jshero.koans.add({id:'for1',title:'for loop',lesson:'Loops can execute code blocks several times. JavaScript knows different kinds of loops. The simplest one is\nthe <code>for</code> loop.\n\n<pre><code>var sum = 0;\nfor (var i = 1; i < 3; i++) {\n  sum = sum + i;\n}</code></pre>\n\nThe <code>for</code> loop consists of three control expressions and the loop code.\nThe three control expressions follow the <code>for</code> keyword in parentheses.\nThey are separated by semicolons. The first expression is the start expression. It is executed once at the beginning\nof the loop. The so-called loop variable is normally initialized here. The second expression is the loop condition.\nIt is evaluated to <code>true</code> or <code>false</code> before each loop iteration. If this expression evaluates\nto <code>true</code>, the loop code is executed. If this expression evaluates to <code>false</code>, the loop is\nterminated and the program execution continues after the loop. The third expression, called the final expression,\nis executed after each loop iteration. The loop variable is normally increased here. Then a new loop iteration is\nstarted with a new evaluation of the loop condition. The loop code follows the three control expressions in brackets.\nIn our example <code>sum</code> has the value <code>0</code> initially. In the start expression <code>i</code> is\ninitialized with <code>1</code>. The loop condition <code>1 < 3</code> is fulfilled, so the loop code is executed.\n<code>sum</code> receives the value <code>0 + 1</code>, i. e. <code>1</code>. Now in the final expression\n<code>i</code> is increased by <code>1</code>. (<code>i++</code> is identical to <code>i = i + 1</code>).\n<code>i</code> thus receives the value <code>2</code>. The second loop starts with the evaluation of the loop condition.\nThis condition (<code>2 < 3</code>) is still fulfilled.\nThe loop code is executed again and <code>sum</code> is now given the value <code>1 + 2</code>, that is <code>3</code>.\nIn the final expression <code>i</code> is increased again and gets the value <code>3</code>.\nThe loop condition <code>3 < 3</code> is no longer fulfilled. The loop is terminated and the program execution continues\nafter the loop. Our code example has added all natural numbers smaller than 3.',task:'Write a function <code>addTo</code> that accepts a number as a parameter and adds all natural numbers\nsmaller or equal than the parameter. The result is to be returned. <code>addTo(3)</code> should return\n<code>1+2+3</code> = <code>6</code>.',hint:'<pre><code>var addTo = function(n) {\n  var sum = 0;\n  for (var i = 0; i <= n; i++) {\n    ...\n  }\n  return sum;\n};</pre></code>',solution:'<pre><code>var addTo = function(n) {\n  var sum = 0;\n  for (var i = 0; i <= n; i++) {\n    sum = sum + i;\n  }\n  return sum;\n};</pre></code>',tests:[function(){return testutil.assert_isFunction('addTo')},function(){return testutil.assert_functionHasNumOfParameter('addTo',1)},function(){return testutil.assert_functionReturns('addTo(0)',0)},function(){return testutil.assert_functionReturns('addTo(1)',1)},function(){return testutil.assert_functionReturns('addTo(2)',3)},function(){return testutil.assert_functionReturns('addTo(3)',6)},function(){return testutil.assert_functionReturns('addTo(9)',45)}]})})(jshero.testutil);
jshero.koans.add({id:'for2',title:'Loops and arrays',lesson:'<code>for</code> loops are handy for traversing arrays.\nIn the following example, the elements of an array are added together:\n\n<pre><code>var sum = 0;\nfor (var i = 0; i < myArray.length; i++) {\n  sum = sum + myArray[i];\n}</code></pre>',task:'Write a function <code>mean</code> that accepts an array filled with numbers\nand returns the arithmetic mean of those numbers. <code>mean([1, 2, 3])</code> should return <code>(1+2+3)/3</code> = <code>2</code>.',tests:[function(){return jshero.testutil.assert_isFunction('mean')},function(){return jshero.testutil.assert_functionHasNumOfParameter('mean',1)},function(){return jshero.testutil.assert_functionReturns('mean([0])',0)},function(){return jshero.testutil.assert_functionReturns('mean([1, 2])',1.5)},function(){return jshero.testutil.assert_functionReturns('mean([1, 2, 3])',2)},function(){return jshero.testutil.assert_functionReturns('mean([-2, -4, 17, 34])',11.25)}]});
jshero.koans.add({id:'function',title:'Functions',lesson:'A function is a block of statements that can be executed as often as you like.\nA function can have parameters and can return a value.\nFunctions are defined by the keyword <code>function</code>, followed by the parameters enclosed in parentheses,\nfollowed by the instructions enclosed in curly brackets.\nUse the keyword <code>return</code> to return a value. At the same time <code>return</code> terminates the function.\nFunctions can be assigned to a variable. With\n\n<pre><code>var color = function() {\n  return \'red\';\n};</code></pre>\n\nwe define a function that returns the value <code>\'red\'</code>. The function has no parameters (the parentheses are empty)\nand contains only the return statement. The function is assigned to the variable <code>color</code>.\nThe function is called via this variable:\n\n<pre><code>var result = color();</code></pre>\n\nNow the function is executed. Its return is assigned to the variable <code>result</code>. <code>result</code> therefore\nhas the value <code>\'red\'</code>.',task:'Declare a variable <code>hello</code>. Assign a function to it returning <code>\'Hello world!\'</code>.',hint:'<pre><code>var hello = function() {\n  ...\n};</code></pre>',solution:'<pre><code>var hello = function() {\n  return \'Hello world!\';\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('hello')},function(){return jshero.testutil.assert_functionReturns('hello()','Hello world!')}]});
jshero.koans.add({id:'function2',title:'Multiple functions',lesson:'Now we define more then one function.\nAs a reminder: A function with name <code>color</code> returning the value\n<code>\'red\'</code> is defined as followed:\n\n<pre><code>var color = function() {\n  return \'red\';\n};</code></pre>',task:'Define two functions. The first function <code>a</code> should return\n<code>\'Hello a!\'</code> and the second function <code>b</code> should return\n <code>\'Hello b!\'</code>.',tests:[function(){return jshero.testutil.assert_isFunction('a')},function(){return jshero.testutil.assert_isFunction('b')},function(){return jshero.testutil.assert_functionReturns('a()','Hello a!')},function(){return jshero.testutil.assert_functionReturns('b()','Hello b!')}]});
jshero.koans.add({id:'functioncall',title:'Function calls',lesson:'The difference between the definition and the call of a function is important.\nThe following definition of a function\n\n<pre><code>var f = function() {\n  return \'hello\';\n};</code></pre>\n\nsays what the function will do: Return \'hello\', if called. The function will not be executed, but only provided.\nOnly with its call\n\n<pre><code>var x = f();</code></pre>\n\nthe function is executed. Every instruction in the function block is executed in order.\nThe result of the function in the example above will be assigned to the variable <code>x</code>.\nTo define a function use the keyword <code>function</code>.\nIf the function is assigned to a variable, the function is called via this variable.\nFunctions are defined once so that they can be used multiple times at different program points by calling them.',task:'1. Define a function <code>greet</code> returning the value <code>\'Haydo!\'</code>.<br/>\n2. Declare a variable <code>salutation</code>. Call the function <code>greet</code> and assign the\nresult of the call to the variable <code>salutation</code>.',hint:'<pre><code>var greet = function() {\n  ...\n};\n\nvar salutation = ...</code></pre>',solution:'<pre><code>var greet = function() {\n  return \'Haydo!\';\n};\n\nvar salutation = greet();</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('greet')},function(){return jshero.testutil.assert_functionReturns('greet()','Haydo!')},function(){return jshero.testutil.assert_variableDefined('salutation')},function(){return jshero.testutil.assert_variableHasValue('salutation','Haydo!')}]});
jshero.koans.add({id:'further',title:'To be continued ...',lesson:'JS Hero will be continued. Here\'s one last exercise.',task:'Write a function <code>digitsum</code> that calculates the digit sum of an integer.\nThe digit sum of an integer is the sum of all its digits.\n<code>digitsum(192)</code> should return <code>12</code>.',tests:[function(){return jshero.testutil.assert_isFunction('digitsum')},function(){return jshero.testutil.assert_functionHasNumOfParameter('digitsum',1)},function(){return jshero.testutil.assert_functionReturns('digitsum(1)',1)},function(){return jshero.testutil.assert_functionReturns('digitsum(192)',12)},function(){return jshero.testutil.assert_functionReturns('digitsum(1234567890)',45)}]});
jshero.koans.add({id:'ggt',title:'gcd',lesson:'The counterpart to the least common multiple is the\n<a href=\'https://en.wikipedia.org/wiki/Greatest_common_divisor\'>greatest common divisor (gcd)</a>.\nThe greatest common divisor of two natural numbers a and b is the largest natural numbers that divides a and b.',task:'Write a function <code>gcd</code> that takes two natural numbers and calculates their gcd.\n<code>gcd(6, 15)</code> should return <code>3</code>.',tests:[function(){return jshero.testutil.assert_isFunction('gcd')},function(){return jshero.testutil.assert_functionHasNumOfParameter('gcd',2)},function(){return jshero.testutil.assert_functionReturns('gcd(1, 1)',1)},function(){return jshero.testutil.assert_functionReturns('gcd(1, 2)',1)},function(){return jshero.testutil.assert_functionReturns('gcd(2, 3)',1)},function(){return jshero.testutil.assert_functionReturns('gcd(2, 4)',2)},function(){return jshero.testutil.assert_functionReturns('gcd(6, 15)',3)},function(){return jshero.testutil.assert_functionReturns('gcd(12, 18)',6)},function(){return jshero.testutil.assert_functionReturns('gcd(18, 12)',6)},function(){return jshero.testutil.assert_functionReturns('gcd(15, 45)',15)},function(){return jshero.testutil.assert_functionReturns('gcd(45, 15)',15)}]});
jshero.koans.add({id:'greaterthan',title:'Compare numbers',lesson:'Numbers can be compared with the well-known mathematical symbols.\nIn the following examples, all expressions return the value <code>true</code>.\n<pre><code>var v1 = 5 > 4;\nvar v2 = 5 >= 5;\nvar v3 = 5 < 6;\nvar v4 = 5 <= 5;</code></pre>',task:'Write a function <code>isThreeDigit</code> that checks if a number is greater than\nor equal to 100 and less than 1000. <code>isThreeDigit(500)</code> should return <code>true</code>.\nThe call <code>isThreeDigit(50)</code> should return <code>false</code>.',tests:[function(){return jshero.testutil.assert_isFunction('isThreeDigit')},function(){return jshero.testutil.assert_functionHasNumOfParameter('isThreeDigit',1)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(100)',true)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(999)',true)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(99)',false)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(1000)',false)}]});
jshero.koans.add({id:'if',title:'if',lesson:'Often code should only be executed if a certain condition is true.\nTo do this, use the <code>if</code> statement.\n\n<pre><code>var win = 0;\nif (dice === 6) {\n  win = 100;\n}</code></pre>\n\nThis statement consists of the keyword <code>if</code> followed by parentheses.\nThe parentheses contain an expression - the condition - that is evaluated to <code>true</code> or <code>false</code>.\nIf the condition results in <code>true</code>, all statements in the block delimited by the curly brackets will be executed.\nIf the condition results in <code>false</code>, the block bounded by the curly brackets will be skipped.\nIn our example, if <code>dice</code> has the value <code>6</code>, then <code>win</code> is set to <code>100</code>.\nIf <code>dice</code> does not have the value <code>6</code>, then <code>win</code> remains at <code>0</code>.',task:'Write a function <code>equals</code> that checks two values for strict equality.\nIf the two values are equal, the string <code>\'EQUAL\'</code> should be returned.\nIf they are unequal, you should get <code>\'UNEQUAL\'</code>.\nThe call <code>equals(1, 1)</code> should return <code>\'EQUAL\'</code>,\nthe call <code>equals(1, 2)</code> should return <code>\'UNEQUAL\'</code>.',tests:[function(){return jshero.testutil.assert_isFunction('equals')},function(){return jshero.testutil.assert_functionHasNumOfParameter('equals',2)},function(){return jshero.testutil.assert_functionReturns('equals(1, 1)','EQUAL')},function(){return jshero.testutil.assert_functionReturns('equals(1, 2)','UNEQUAL')},function(){return jshero.testutil.assert_functionReturns('equals(1, \'1\')','UNEQUAL')},function(){return jshero.testutil.assert_functionReturns('equals(\'JS\', \'JS\')','EQUAL')},function(){return jshero.testutil.assert_functionReturns('equals(\'left\', \'right\')','UNEQUAL')}]});
(function(testutil){jshero.koans.add({id:'increment',title:'Increment',lesson:'In programming, you often want to increase or decrease a counter by one.\n    This can easily be done with the increment or decrement operator.\n\n<pre><code>var x = 1;\nx++;\nvar y = 10;\ny--;</code></pre>\n\n<code>x++</code> is the same as <code>x = x + 1</code> and <code>y--</code> is the same as <code>y = y - 1</code>.\nAfter executing the example code, <code>x</code> has the value <code>2</code> and <code>y</code> has the value\n<code>9</code>.',task:'Which value does x have after execution of the following code? \n<pre><code>var x = 3;\nx++;\nx = x * 2;\nx--;</code></pre>',solution:'<pre><code>7</code></pre>',tests:[function(){return testutil.assert_isValue('7')}]})})(jshero.testutil);
jshero.koans.add({id:'join',title:'Array: join()',lesson:'With <code>join</code> you join all elements of an array into a string:\n\n<pre><code>var words = [\'Sex\', \'Drugs\', \'Rock\', \'Roll\'];\nvar s1 = words.join();\nvar s2 = words.join(\' & \');\nvar s3 = words.join(\' and \');</code></pre>\n\nWithout an argument <code>join</code> joins the elements separated by commas.\n<code>s1</code> has the value <code>\'Sex,Drugs,Rock,Roll\'</code>.\nOtherwise, the passed argument specifies the separator.\n<code>s2</code> has the value <code>\'Sex & Drugs & Rock & Roll\'</code> and\n<code>s3</code> has the value  <code>\'Sex and Drugs and Rock and Roll\'</code>.',task:'Write a function <code>list</code> that joins words in an array into a list.\n<code>list([\'Huey\', \'Dewey\', \'Louie\'])</code> should return <code>\'Huey, Dewey and Louie\'</code>.\nThe passed array contains at least two words.',tests:[function(){return jshero.testutil.assert_isFunction('list')},function(){return jshero.testutil.assert_functionHasNumOfParameter('list',1)},function(){return jshero.testutil.assert_functionReturns('list([\'Ernie\', \'Bert\'])','Ernie and Bert')},function(){return jshero.testutil.assert_functionReturns('list([\'Huey\', \'Dewey\', \'Louie\'])','Huey, Dewey and Louie')},function(){return jshero.testutil.assert_functionReturns('list([\'C\', \'C++\', \'Python\', \'PHP\'])','C, C++, Python and PHP')}]});
(function(testutil){jshero.koans.add({id:'jsx01',title:'What is x?',lesson:'Let\'s practice what we\'ve just learned. Here you have to read code.',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var x = \'Geeta\';</code></pre>',solution:'<pre><code>\'Geeta\'</code></pre>',tests:[function(){return testutil.assert_isString('Geeta')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'jsx02',title:'Reassignment',lesson:'A variable can be reassigned a new value at any time using the equal sign.\n<pre><code>var color = \'red\';\ncolor = \'green\';</code></pre>\nThe variable <code>color</code> is initialized with the value <code>\'red\'</code>.\nThen it receives the value <code>\'green\'</code>.',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var x = \'Tic\';\nx = \'Tac\';\nx = \'Toe\';</code></pre>',solution:'<pre><code>\'Toe\'</code></pre>',tests:[function(){return testutil.assert_isString('Toe')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'jsx03',title:'Assign variables',lesson:'A variable can be assigned the value of another variable.\n<pre><code>var name1 = \'Olga\';\nvar name2 = name1;\nname1 = \'Clara\';</code></pre>\nIn the second line, <code>name2</code> is assigned the value of <code>name1</code>.\nThe variable <code>name2</code> gets the value <code>\'Olga\'</code>. This value is retained by <code>name2</code>,\neven if <code>name1</code> receives a new value afterwards.',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var x = \'Laurel\';\nvar y = \'Hardy\';\nvar z = y;\ny = x;\nx = z;</code></pre>',solution:'<pre><code>\'Hardy\'</code></pre>',tests:[function(){return testutil.assert_isString('Hardy')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'jsx04',title:'What is x?',lesson:'Just practice this again.',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var hello = function() {\n  return \'Hi!\';\n};\n\nvar x = hello();</code></pre>',solution:'<pre><code>\'Hi!\'</code></pre>',tests:[function(){return testutil.assert_isString('Hi!')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'jsx05',title:'What is x?',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var reply = function(phrase) {\n  return phrase;\n};\n\nvar x = reply(\'How do you do?\');</code></pre>',solution:'<pre><code>\'How do you do?\'</code></pre>',tests:[function(){return testutil.assert_isString('How do you do?')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'jsx06',title:'What is x?',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var whereIs = function(name) {\n  return \'Where is \' + name + \'?\';\n};\n\nvar x = whereIs(\'Jacky\');</code></pre>',solution:'<pre><code>\'Where is Jacky?\'</code></pre>',tests:[function(){return testutil.assert_isString('Where is Jacky?')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'jsx06b',title:'What is x?',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var hi = function(name) {\n  return \'Hi \' + name + \'!\';\n};\n\nvar h1 = hi(\'Selva\');\nvar h2 = hi(\'Pola\');\nvar x = h1 + \' \' + h2;</code></pre>',solution:'<pre><code>\'Hi Selva! Hi Pola!\'</code></pre>',tests:[function(){return testutil.assert_isString('Hi Selva! Hi Pola!')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'jsx07',title:'What is x?',task:'Which value does <code>x</code> have after execution of the following code?\n<pre><code>var double = function(name) {\n  return name + \' and \' + name;\n};\n\nvar x = double(\'Roy\');</code></pre>',solution:'<pre><code>\'Roy and Roy\'</code></pre>',tests:[function(){return testutil.assert_isString('Roy and Roy')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'log',title:'Logging and Strings',lesson:'Now we want to practice logging together with string concatenation.',task:'Write a function <code>shout</code> that takes a string and\nreturns this string duplicated. In addition, the return should be logged.\nThe call <code>shout(\'Fire\')</code> should return <code>\'FireFire\'</code> and should log <code>\'FireFire\'</code>.',hint:'<pre><code>var shout = function(word) {\n  var result = word + word;\n  ...\n};</code></pre>',solution:'<pre><code>var shout = function(word) {\n  var result = word + word;\n  console.log(result);\n  return result;\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('shout')},function(){return testutil.assert_functionHasNumOfParameter('shout',1)},function(){return testutil.assert_functionReturns('shout(\'Fire\')','FireFire')},function(){return testutil.assert_functionReturns('shout(\'Run\')','RunRun')},function(){return testutil.assert_functionLogs('shout(\'Fire\')','FireFire')},function(){return testutil.assert_functionLogs('shout(\'Run\')','RunRun')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'log1',title:'Logging',lesson:'Programming always includes the search for errors.\nOne way to find errors is logging.\nDuring program execution, selective outputs are made.\nTo do this in JavaScript, use the <code>console.log</code> function:\n\n<pre><code>console.log(\'Hello console!\');</code></pre>\n\nHere, <code>console.log</code> outputs <code>\'Hello console!\'</code>.\nWhere you can see the output depends on your JavaScript environment.\nIn browsers you do not see the log normally.\nBut most desktop browsers have so-called\n<a href=\'https://en.wikipedia.org/wiki/Web_development_tools\'>developer tools</a>.\nThese are powerful tools to support web developers. One of these tools is the console.\nThe log is displayed there. How to open the developer tools depends on your browser.\nOn many desktop browsers, they are opened with the F12 key.\nYou can then select the console as a tab. Alternatively, you can open the console via the browser menu.\nThe developer tools are not available on mobile devices.\nTherefore JS Hero writes the log additionally into the test output.',task:'Write a function <code>log</code> that logs <code>\'Hello Console!\'</code>.\nIf you are working with a desktop browser, open the developer tools to see the output there as well.',hint:'<pre><code>var log = function() {\n  console.log(...);\n};</code></pre>',solution:'<pre><code>var log = function() {\n  console.log(\'Hello Console!\');\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('log')},function(){return testutil.assert_functionLogs('log()','Hello Console!')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'log2',title:'Logging variables',lesson:'Now let\'s log variables:\n\n<pre><code>var scientist = \'Ken Thompson\';\nconsole.log(scientist);</code></pre>\n\nThe variable <code>scientist</code> is logged.\nThe console outputs <code>\'Ken Thompson\'</code>.',task:'Write a function <code>log</code>, that takes a parameter and logs this parameter.\n<code>log(\'Ken Thompson\')</code> should log <code>\'Ken Thompson\'</code>.',hint:'<pre><code>var log = function(value) {\n  ...\n};</code></pre>',solution:'<pre><code>var log = function(value) {\n  console.log(value);\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('log')},function(){return testutil.assert_functionHasNumOfParameter('log',1)},function(){return testutil.assert_functionLogs('log(\'Ken Thompson\')','Ken Thompson')},function(){return testutil.assert_functionLogs('log(\'Dennis Ritchie\')','Dennis Ritchie')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'math',title:'Math',lesson:'Many mathematical functions are grouped together in the <code>Math</code> object.\nFor example, <code>Math.sqrt(x)</code> returns the square root\nand <code>Math.pow(x, y)</code> calculates x to the power of y.\n\n<pre><code>var y1 = Math.sqrt(9);\nvar y2 = Math.pow(10, 3);</code></pre>\n\n<code>y1</code> has the value <code>3</code> and <code>y2</code> has the value <code>1000</code>\n(10&sup3; = 10 * 10 * 10 = 1000).',task:'Write a function <code>hypotenuse</code> that calculates the length of the hypotenuse\nof a right triangle. The length of the two legs is passed to the function. Tip: In a right\ntriangle the Pythagorean theorem is valid. If a and b are the lengths of the two legs and c\nis the length of the hypotenuse, the following is true: a&sup2; + b&sup2; = c&sup2;.\nSince 3&sup2; + 4&sup2; = 5&sup2; applies, <code>hypotenuse(3,&nbsp;4)</code> should return <code>5</code>.',hint:'<pre><code>var hypotenuse = function(a, b) {\n  var cSquare = Math.pow(a, 2) + Math.pow(b, 2);\n  return ...\n};</code></pre>',solution:'<pre><code>var hypotenuse = function(a, b) {\n  var cSquare = Math.pow(a, 2) + Math.pow(b, 2);\n  return Math.sqrt(cSquare);\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('hypotenuse')},function(){return testutil.assert_functionHasNumOfParameter('hypotenuse',2)},function(){return testutil.assert_functionReturns('hypotenuse(3, 4)',5)},function(){return testutil.assert_functionReturns('hypotenuse(5, 12)',13)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'mean',title:'Parentheses',lesson:'Just as in mathematics, the order of operations rules are valid in JavaScript. Multiplication and\ndivision are performed before addition and subtraction. With parentheses you can specify the order of operations.\n\n<pre><code>var x1 = 3 + 4 * 2;\nvar x2 = (3 + 4) * 2;</code></pre>\n\n<code>x1</code> is <code>11</code> and <code>x2</code> is <code>14</code>.',task:'Write a function <code>mean</code> that takes 2 numbers and returns their mean value.\n<code>mean(1, 2)</code> should return <code>1.5</code>.',hint:'<pre><code>The mean value of two numbers\nx and y is (x + y) / 2.</code></pre>',solution:'<pre><code>var mean = function(x, y) {\n  return (x + y) / 2;\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('mean')},function(){return testutil.assert_functionHasNumOfParameter('mean',2)},function(){return testutil.assert_functionReturns('mean(1, 2)',1.5)},function(){return testutil.assert_functionReturns('mean(0, 0)',0)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'minmax',title:'min and max',lesson:'The minimum and maximum of a set of numbers can be calculated with\n<code>Math.min()</code> and <code>Math.max()</code>:\n\n<pre><code>var min = Math.min(5, 7);\nvar max = Math.max(3, 9, 2);</code></pre>\n\n<code>min</code> receives the value <code>5</code> and <code>max</code> the value <code>9</code>.\nThe special: Both functions can be called with an arbitrary number of arguments.',task:'Write a function <code>midrange</code>, that calculates the midrange of 3 numbers.\nThe <a href=\'https://en.wikipedia.org/wiki/Mid-range\'>midrange</a>\nis the mean of the smallest and largest number.\n<code>midrange(3, 9, 1)</code> should return <code>(9+1)/2</code> = <code>5</code>.',hint:'<pre><code>var midrange = function(a, b, c) {\n  var min = Math.min(a, b, c);\n  var max = Math.max(a, b, c);\n  ...\n};</code></pre>',solution:'<pre><code>var midrange = function(a, b, c) {\n  var min = Math.min(a, b, c);\n  var max = Math.max(a, b, c);\n  return (min + max) / 2;\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('midrange')},function(){return testutil.assert_functionHasNumOfParameter('midrange',3)},function(){return testutil.assert_functionReturns('midrange(3, 9, 1)',5)},function(){return testutil.assert_functionReturns('midrange(3, 0, 8)',4)},function(){return testutil.assert_functionReturns('midrange(7, 4, 0)',3.5)},function(){return testutil.assert_functionReturns('midrange(-6, -5, -2)',-4)},function(){return testutil.assert_functionReturns('midrange(5, -5, 2)',0)},function(){return testutil.assert_functionReturns('midrange(10, 20, 17)',15)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'modulo',title:'Modulo',lesson:'Another arithmetic operator is modulo. It calculates the remainder of a division and is represented by <code>%</code>.'+'<pre><code>var x = 7 % 2;<br>'+'var y = 20 % 3;</code></pre>'+'7 divided by 2 is 3 with remainder 1. <code>x</code> is <code>1</code>.<br>'+'20 divided by 3 is 6 with remainder 2. <code>y</code> is <code>2</code>.',task:'Write a function <code>onesDigit</code> that takes a natural number and returns the ones digit of that number. '+'<code>onesDigit(2674)</code> should return <code>4</code>.',hint:'<pre><code>var onesDigit = function(n) {\n// Use modulo 10.  \n};</code></pre>',solution:'<pre><code>var onesDigit = function(n) {\n  return n % 10;\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('onesDigit')},function(){return testutil.assert_functionHasNumOfParameter('onesDigit',1)},function(){return testutil.assert_functionReturns('onesDigit(0)',0)},function(){return testutil.assert_functionReturns('onesDigit(82)',2)},function(){return testutil.assert_functionReturns('onesDigit(119)',9)}]})})(jshero.testutil);
jshero.koans.add({id:'nor',title:'NOR',lesson:'In the last task you have coded a so-called NAND (Not AND) gate. NAND gates are a standard component in\ndigital electronics. Any Boolean function can be implemented by using a combination of NAND gates.\nHere you will get to know another standard gate, the NOR (Not OR) gate.',task:'Write a function <code>nor</code> that takes two Boolean values.\nIf both values are <code>false</code>, the result should be <code>true</code>.\nIn the other cases the return should be <code>false</code>. The call <code>nor(false, false)</code>\nshould return <code>true</code>. The calls <code>nor(true, false)</code>, <code>nor(false, true)</code>\nand <code>nor(true, true)</code> should return <code>false</code>.',tests:[function(){return jshero.testutil.assert_isFunction('nor')},function(){return jshero.testutil.assert_functionHasNumOfParameter('nor',2)},function(){return jshero.testutil.assert_functionReturns('nor(false, false)',true)},function(){return jshero.testutil.assert_functionReturns('nor(false, true)',false)},function(){return jshero.testutil.assert_functionReturns('nor(true, false)',false)},function(){return jshero.testutil.assert_functionReturns('nor(true, true)',false)}]});
jshero.koans.add({id:'notequals',title:'Strict inequality',lesson:'With <code>!==</code> two values are compared for strict inequality.\n\n<pre><code>var c1 = \'rose\' !== \'Rose\';\nvar c2 = 10 !== \'10\';</code></pre>\n\nBoth comparisons result in <code>true</code>.\nThe first one, because the two strings differ in upper and lower case.\nThe second, because the two values differ in type.',task:'Write a function <code>unequal</code> that checks 3 values for strict inequality.\nThe function should return <code>true</code> if all three parameters are strict unequal.\nOtherwise <code>false</code>. The call <code>unequal(1, 2, 3)</code> should return <code>true</code>\nand <code>unequal(1, 1, 2)</code> should return <code>false</code>.',tests:[function(){return jshero.testutil.assert_isFunction('unequal')},function(){return jshero.testutil.assert_functionHasNumOfParameter('unequal',3)},function(){return jshero.testutil.assert_functionReturns('unequal(1, 2, 3)',true)},function(){return jshero.testutil.assert_functionReturns('unequal(2, 1, 1)',false)},function(){return jshero.testutil.assert_functionReturns('unequal(1, 2, 1)',false)},function(){return jshero.testutil.assert_functionReturns('unequal(1, 1, 2)',false)},function(){return jshero.testutil.assert_functionReturns('unequal(\'rose\', \'Rose\', \'ROSE\')',true)},function(){return jshero.testutil.assert_functionReturns('unequal(\'1\', 1, true)',true)}]});
(function(testutil){jshero.koans.add({id:'number',title:'Numbers',lesson:'Numbers are represented by simple numerals. They can have a decimal point and a minus sign.'+'<pre><code>var x1 = 1;<br>var x2 = 1.0;<br>var x3 = 3.14;<br>var x4 = -1;</code></pre>'+'<code>1</code> and <code>1.0</code> are the same number. '+'You can calculate with numbers. The four basic arithmetics adding, subtracting, multiplying and dividing are represented by '+'<code> + - * </code> and <code>/</code>.'+'<pre><code>var x1 = 6;<br>var x2 = 2;<br>var x3 = x1 + x2;<br>var x4 = x1 - x2;<br>var x5 = x1 * x2;<br>var x6 = x1 / x2;</code></pre>'+'The variables <code>x3</code> to <code>x6</code> thus have the values <code>8</code>, <code>4</code>, <code>12</code> and <code>3</code>.',task:'Write a function <code>add</code> that takes two numbers and returns their sum. '+'<code>add(1,&nbsp;2)</code> should return <code>3</code>.',hint:'<pre><code>var add = function(x, y) {\n  return ...\n};</code></pre>',solution:'<pre><code>var add = function(x, y) {\n  return x + y;\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('add')},function(){return testutil.assert_functionHasNumOfParameter('add',2)},function(){return testutil.assert_functionReturns('add(0, 0)',0)},function(){return testutil.assert_functionReturns('add(2, 3)',5)}]})})(jshero.testutil);
jshero.koans.add({id:'parameter',title:'Parameters',lesson:'Now we get to know functions with parameters. With\n<pre><code>var give = function(input) {\n  return input;<br>};</code></pre>\nwe define a function that simply returns the parameter <code>input</code>.\nParameters are variables. With\n<pre><code>var result = give(\'apple\');</code></pre>\nwe call the function and pass it the argument <code>\'apple\'</code>. The function will be executed.\nThe argument <code>\'apple\'</code> will be assigned to the parameter <code>input</code>.\n<code>input</code> gets the value <code>\'apple\'</code>.\nThe variable <code>input</code> is returned in the single code line of the function.\nThis return is assigned to the variable <code>result</code>. Finally, <code>result</code> has the value <code>\'apple\'</code>.',task:'Write a function <code>echo</code> that also returns the passed parameter.\n<code>echo(\'Greta\')</code> should return <code>\'Greta\'</code> and <code>echo(\'CO2\')</code> should return <code>\'CO2\'</code>',hint:'<pre><code>var echo = function(sound) {\n  ...\n};</code></pre>',solution:'<pre><code>var echo = function(sound) {\n  return sound;\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('echo')},function(){return jshero.testutil.assert_functionHasNumOfParameter('echo',1)},function(){return jshero.testutil.assert_functionReturns('echo(\'Greta\')','Greta')},function(){return jshero.testutil.assert_functionReturns('echo(\'CO2\')','CO2')}]});
(function(testutil){jshero.koans.add({id:'pi',title:'Math.PI',lesson:'Besides functions <code>Math</code> offers some mathematical constants.\n  <code>Math.PI</code> gives &#960; (roughly 3.14) and <code>Math.E</code> gives Euler\'s number e (roughly 2.71).',task:'Write a function <code>area</code> that calculates the area of a circle.\nThe function is given the radius of the circle. <code>area(1)</code> should return <code>&#960;</code> and\n<code>area(2)</code> should return <code>4 * &#960;</code>.',tests:[function(){return testutil.assert_isFunction('area')},function(){return testutil.assert_functionHasNumOfParameter('area',1)},function(){return testutil.assert_functionReturns('area(0)',0)},function(){return testutil.assert_functionReturns('area(1)',Math.PI)},function(){return testutil.assert_functionReturns('area(2)',4*Math.PI)}]})})(jshero.testutil);
(function(testutil,evaluator){var evalDice=function(){return evaluator.evalTest('dice()')};var isOneToSix=function(x){return x===1||x===2||x===3||x===4||x===5||x===6};var throwA=function(x){var result;for(var i=0;i<1000;i++){result=evalDice();if(result===x){return true}}return false};var testWith=function(x){var ok,msg,e;try{ok=throwA(x);if(ok){msg='<code>dice()</code> returned at least once <code>'+x+'</code> at 1000 calls.'}else{msg='<code>dice()</code> did not return <code>'+x+'</code> at 1000 calls.'}}catch(exc){ok=false;msg='Error when calling <code>dice()</code>.';e=exc}return{ok:ok,msg:msg,e:e}};jshero.koans.add({id:'random',title:'Random numbers',lesson:'<code>Math.random()</code> returns a pseudo-random number between 0 (inclusive) and 1 (exclusive).\n\n<pre><code>var x = Math.random();</code></pre>\n\n<code>x</code> could, for example, get the value <code>0.6206372241429993</code>.\nEach call of <code>Math.random()</code> generates a new random number.\nThe numbers are equally distributed between 0 and 1. They are called pseudo-random numbers,\nbecause they look random but are still calculated.\nIf you want to get random numbers in another range or with a different distribution,\nyou have to transform the numbers generated by <code>Math.random()</code> adequately.\nThis should be practiced now.',task:'Write a function <code>dice</code> that returns like a dice a random number between 1 and 6.',tests:[function(){return jshero.testutil.assert_isFunction('dice')},function(){return jshero.testutil.assert_functionHasNumOfParameter('dice',0)},function(){var ok,msg,e;try{ok=true;var result;for(var i=0;i<1000;i++){result=evalDice();if(!isOneToSix(result)){ok=false;break}}if(ok){msg='<code>dice()</code> returns only natural numbers between <code>1</code> and <code>6</code> at 1000 calls.'}else{msg='<code>dice()</code> returns at least once <code>'+JSON.stringify(result)+' </code> at 1000 calls. This is not a natural number between <code>1</code> and <code>6</code>.'}}catch(exc){ok=false;msg='Error when calling <code>dice()</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){return testWith(1)},function(){return testWith(2)},function(){return testWith(3)},function(){return testWith(4)},function(){return testWith(5)},function(){return testWith(6)}]})})(jshero.testutil,jshero.evaluator);
jshero.koans.add({id:'replace',title:'String: replace()',lesson:'The <code>replace</code> method replaces a substring with another:\n\n<pre><code>var str = \'JavaScript\';\nvar newstr = str.replace(\'Java\', \'ECMA\');</code></pre>\n\n<code>\'Java\'</code> is replaced with <code>\'ECMA\'</code>. Thus <code>newstr</code> has the value <code>\'ECMAScript\'</code>.\nThe original string remains unchanged. Only the first occurrence is replaced:\n\n<pre><code>var newstr = \'Dada\'.replace(\'a\', \'i\');</code></pre>\n\n<code>newstr</code> has the value <code>\'Dida\'</code> and not <code>\'Didi\'</code>.',task:'Write a function <code>normalize</code>, that replaces <code>\'-\'</code> with <code>\'/\'</code> in a date string.\n<code>normalize(\'20-05-2017\')</code> should return <code>\'20/05/2017\'</code>.',tests:[function(){return jshero.testutil.assert_isFunction('normalize')},function(){return jshero.testutil.assert_functionHasNumOfParameter('normalize',1)},function(){return jshero.testutil.assert_functionReturns('normalize(\'20-05-2017\')','20/05/2017')},function(){return jshero.testutil.assert_functionReturns('normalize(\'8-11-1922\')','8/11/1922')}]});
(function(testutil){jshero.koans.add({id:'roman1a',title:'Roman numerals I',lesson:'The following task is challenging.',task:'Write a function <code>arabic</code> that converts a\n<a href=\'https://en.wikipedia.org/wiki/Roman_numerals\'>Roman number</a> (up to 1000) into an\n<a href=\'https://en.wikipedia.org/wiki/Hindu%E2%80%93Arabic_numeral_system\'>Arabic</a>.\n<code>arabic(\'CDLXXXIII\')</code> should return <code>483</code>.',tests:[function(){return testutil.assert_isFunction('arabic')},function(){return testutil.assert_functionHasNumOfParameter('arabic',1)},function(){return testutil.assert_functionReturns('arabic(\'I\')',1)},function(){return testutil.assert_functionReturns('arabic(\'II\')',2)},function(){return testutil.assert_functionReturns('arabic(\'III\')',3)},function(){return testutil.assert_functionReturns('arabic(\'IV\')',4)},function(){return testutil.assert_functionReturns('arabic(\'V\')',5)},function(){return testutil.assert_functionReturns('arabic(\'VI\')',6)},function(){return testutil.assert_functionReturns('arabic(\'X\')',10)},function(){return testutil.assert_functionReturns('arabic(\'CDLXXXIII\')',483)},function(){return testutil.assert_functionReturns('arabic(\'DCLXVI\')',666)},function(){return testutil.assert_functionReturns('arabic(\'CMXCIX\')',999)},function(){return testutil.assert_functionReturns('arabic(\'M\')',1000)}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'roman2',title:'Roman numerals II',lesson:'Now let\'s try it vice-versa.',task:'Write a function <code>roman</code> that converts an Arabic number (up to 1000) into a Roman numeral.\n    <code>roman(483)</code> should return <code>\'CDLXXXIII\'</code>.',tests:[function(){return testutil.assert_isFunction('roman')},function(){return testutil.assert_functionHasNumOfParameter('roman',1)},function(){return testutil.assert_functionReturns('roman(1)','I')},function(){return testutil.assert_functionReturns('roman(2)','II')},function(){return testutil.assert_functionReturns('roman(3)','III')},function(){return testutil.assert_functionReturns('roman(4)','IV')},function(){return testutil.assert_functionReturns('roman(5)','V')},function(){return testutil.assert_functionReturns('roman(6)','VI')},function(){return testutil.assert_functionReturns('roman(10)','X')},function(){return testutil.assert_functionReturns('roman(483)','CDLXXXIII')},function(){return testutil.assert_functionReturns('roman(666)','DCLXVI')},function(){return testutil.assert_functionReturns('roman(999)','CMXCIX')},function(){return testutil.assert_functionReturns('roman(1000)','M')}]})})(jshero.testutil);
jshero.koans.add({id:'round',title:'Rounding',lesson:'If you want to round a number, you can use the\n<code>Math.round()</code>, <code>Math.floor()</code> and <code>Math.ceil()</code> functions.\n\n<pre><code>var a = Math.round(5.49);\nvar b = Math.round(4.5);\nvar c = Math.floor(5.99);\nvar d = Math.ceil(4.01);</code></pre>\n\n<code>Math.round()</code> rounds a number to the nearest integer,\n<code>Math.floor()</code> rounds a number downwards to the nearest integer and\n<code>Math.ceil()</code> rounds a number upwards to the nearest integer.\nTherefore, the variables <code>a</code> to <code>d</code> all get the value <code>5</code>.',task:'Write a function <code>round100</code> that rounds a number to the nearest hundred.\n<code>round100(1749)</code> should return <code>1700</code> and <code>round100(856.12)</code> should return <code>900</code>.',tests:[function(){return jshero.testutil.assert_isFunction('round100')},function(){return jshero.testutil.assert_functionHasNumOfParameter('round100',1)},function(){return jshero.testutil.assert_functionReturns('round100(49.999)',0)},function(){return jshero.testutil.assert_functionReturns('round100(50)',100)},function(){return jshero.testutil.assert_functionReturns('round100(349)',300)},function(){return jshero.testutil.assert_functionReturns('round100(350)',400)},function(){return jshero.testutil.assert_functionReturns('round100(4649)',4600)},function(){return jshero.testutil.assert_functionReturns('round100(4650)',4700)}]});
jshero.koans.add({id:'slice',title:'Array: slice()',lesson:'With <code>slice</code> you can copy a subarray from an array:\n\n<pre><code>var abcd = [\'a\', \'b\', \'c\', \'d\'];\nvar ab = abcd.slice(0, 2);\nvar bc = abcd.slice(1, 3);\nvar bcd = abcd.slice(1, 4);</code></pre>\n\nThe first parameter specifies the start index (included) and the second parameter specifies the end index (excluded).\nThe original array will not be modified.',task:'Write a function <code>halve</code> that copies the first half of an array.\nWith an odd number of array elements, the middle element should belong to the first half.\n<code>halve([1,&nbsp;2,&nbsp;3,&nbsp;4])</code> should return <code>[1,&nbsp;2]</code>.',tests:[function(){return jshero.testutil.assert_isFunction('halve')},function(){return jshero.testutil.assert_functionHasNumOfParameter('halve',1)},function(){return jshero.testutil.assert_functionReturns('halve([1, 2])',[1])},function(){return jshero.testutil.assert_functionReturns('halve([1, 2, 3])',[1,2])},function(){return jshero.testutil.assert_functionReturns('halve([1, 2, 3, 4])',[1,2])},function(){return jshero.testutil.assert_functionReturns('halve([1, 2, 3, 4, 5])',[1,2,3])}]});
(function(testutil){jshero.koans.add({id:'string',title:'Strings',lesson:'We have seen that a variable is a container for a value. A value can be a text like <code>\'Hello world!\'</code>.\nValues have a type. The type of <code>\'Hello world!\'</code> is string. You can use single or double quotes.\n<code>\'Hello world!\'</code> is the same string as <code>"Hello world!"</code>.<br>\nYou can work with strings. For example, they can be concatenated. This is done with the <code>+</code> sign.\n<code>\'Java\' + \'Script\'</code> results in the string <code>\'JavaScript\'</code>.\nThe following function appends <code>\' is great!\'</code> to the passed parameter and returns the result:\n\n<pre><code>var praise = function(name) {\n  return name + \' is great!\';\n};</code></pre>\n\n<code>praise(\'JavaScript\')</code> will return <code>\'JavaScript is great!\'</code>.',task:'Write a function <code>greet</code> having one parameter and returning <code>\'Hello &lt;parameter&gt;!\'</code>.\n<code>greet(\'Ada\')</code> should return <code>\'Hello Ada!\'</code> and <code>greet(\'Tayo\')</code> should return\n<code>\'Hello Tayo!\'</code>.',hint:'<pre><code>var greet = function(name) {\n  return ...\n};</code></pre>',solution:'<pre><code>var greet = function(name) {\n  return \'Hello \' + name + \'!\';\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('greet')},function(){return testutil.assert_functionHasNumOfParameter('greet',1)},function(){return testutil.assert_functionReturns('greet(\'Ada\')','Hello Ada!')},function(){return testutil.assert_functionReturns('greet(\'Tayo\')','Hello Tayo!')}]})})(jshero.testutil);
(function(testutil){jshero.koans.add({id:'stringcharat',title:'String: charAt()',lesson:'To get a character from a string at a specified index, use the <code>charAt(index)</code> method:\n<pre><code>var char0 = \'Frantz\'.charAt(0);\nvar char1 = \'Frantz\'.charAt(1);\nvar char9 = \'Frantz\'.charAt(9);</code></pre>\nThe first character has the index 0. So <code>char0</code> has the value <code>\'F\'</code> and <code>char1</code> has the value <code>\'r\'</code>.\nIf the index is larger than the index of the last character, the empty string is returned. So <code>char9</code> has the value <code>\'\'</code>.',task:'Write a function <code>shortcut</code> that takes two strings and returns the initial letters of theses strings.\n<code>shortcut(\'Amnesty\', \'International\')</code> should return <code>\'AI\'</code>.',hint:'<pre><code>var shortcut = function(s1, s2) {\n  ...\n};</code></pre>',solution:'<pre><code>var shortcut = function(s1, s2) {\n  return s1.charAt(0) + s2.charAt(0);\n};</code></pre>',tests:[function(){return testutil.assert_isFunction('shortcut')},function(){return testutil.assert_functionHasNumOfParameter('shortcut',2)},function(){return testutil.assert_functionReturns('shortcut(\'Amnesty\', \'International\')','AI')},function(){return testutil.assert_functionReturns('shortcut(\'Java\', \'Script\')','JS')}]})})(jshero.testutil);
jshero.koans.add({id:'stringindexof',title:'String: indexOf()',lesson:'To determine the first occurrence of a string within another string, use the <code>indexOf</code> method:\n\n<pre><code>var n1 = \'bit\'.indexOf(\'it\');\nvar n2 = \'bit\'.indexOf(\'js\');\nvar n3 = \'bit\'.indexOf(\'IT\');</code></pre>\n\n<code>n1</code> is <code>1</code>, because the starting position of <code>\'it\'</code> in <code>\'bit\'</code> is <code>1</code>.\nAs usual, counting starts at 0. <code>indexOf</code> returns <code>-1</code> if the search string does not occur in the calling string.\nThus <code>n2</code> is <code>-1</code>. The <code>indexOf</code> method is case sensitive. So <code>n3</code> is also <code>-1</code>.',task:'Write a function <code>indexOfIgnoreCase</code> taking two strings\nand determining the first occurrence of the second string in the first string. The function should be case insensitive.\n<code>indexOfIgnoreCase(\'bit\',\'it\')</code> and <code>indexOfIgnoreCase(\'bit\',\'IT\')</code> should return <code>1</code>.',hint:'<pre><code>var indexOfIgnoreCase = function(s1, s2) {\n// Change s1 and s2\n// first to lowercase.\n// Then use the\n// indexOf method. \n};</code></pre>',solution:'<pre><code>var indexOfIgnoreCase = function(s1, s2) {\n  var s1Lower = s1.toLowerCase();\n  var s2Lower = s2.toLowerCase();\n  return s1Lower.indexOf(s2Lower);\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('indexOfIgnoreCase')},function(){return jshero.testutil.assert_functionHasNumOfParameter('indexOfIgnoreCase',2)},function(){return jshero.testutil.assert_functionReturns('indexOfIgnoreCase(\'bit\', \'bi\')',0)},function(){return jshero.testutil.assert_functionReturns('indexOfIgnoreCase(\'bit\', \'it\')',1)},function(){return jshero.testutil.assert_functionReturns('indexOfIgnoreCase(\'bit\', \'T\')',2)},function(){return jshero.testutil.assert_functionReturns('indexOfIgnoreCase(\'bit\', \'js\')',-1)}]});
jshero.koans.add({id:'stringindexof2',title:'String: indexOf() with from index',lesson:'The <code>indexOf</code> method allows you to specify the position\nfrom which the search should start. This is done with a second parameter.\n\n<pre><code>var n1 = \'White Rabbit\'.indexOf(\'it\', 1);\nvar n2 = \'White Rabbit\'.indexOf(\'it\', 3);</code></pre>\n\nThe first <code>\'it\'</code> in <code>\'White Rabbit\'</code> has the index <code>2</code>.\nStarting our search at position <code>1</code> it will be found. <code>n1</code> is <code>2</code>.\nThe second <code>\'it\'</code> in <code>\'White Rabbit\'</code> has the index <code>10</code>.\nStarting our search at position <code>3</code> it will be found. <code>n2</code> is <code>10</code>.',task:'Write a function <code>secondIndexOf</code>, taking two strings\nand determining the second occurrence of the second string in the first string.\nIf the search string does not occur twice, <code>-1</code> should be returned.\n<code>secondIndexOf(\'White Rabbit\', \'it\')</code> should return <code>10</code>.',hint:'<pre><code>var secondIndexOf = function(s1, s2) {\n// Use indexOf twice. \n};</code></pre>',solution:'<pre><code>var secondIndexOf = function(s1, s2) {\n  var firstIndex = s1.indexOf(s2);\n  return s1.indexOf(s2, firstIndex + 1);\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('secondIndexOf')},function(){return jshero.testutil.assert_functionHasNumOfParameter('secondIndexOf',2)},function(){return jshero.testutil.assert_functionReturns('secondIndexOf(\'White Rabbit\', \'it\')',10)},function(){return jshero.testutil.assert_functionReturns('secondIndexOf(\'White Rabbit\', \'bit\')',-1)},function(){return jshero.testutil.assert_functionReturns('secondIndexOf(\'Oh dear! Oh dear!\', \'Oh\')',9)}]});
jshero.koans.add({id:'stringlength',title:'String: length',lesson:'Strings have the <code>length</code> property. This property represents the number of characters in a string.\nTo do this, you must append <code>.length</code> to the string or to the variable that contains the string:\n\n<pre><code>var charNumber = \'Ai\'.length;</code/></pre>\n\n<code>\'Ai\'</code> has 2 characters. So <code>charNumber</code> has the value <code>2</code>.\n\n<pre><code>var name = \'Weiwei\';\ncharNumber = name.length;</code/></pre>\n\n<code>\'Weiwei\'</code> has 6 characters. <code>charNumber</code> now has the value <code>6</code>.\n<pre><code>charNumber = \'\'.length;</code/></pre>\nThe empty string has no characters. The value of <code>charNumber</code> is <code>0</code>.',task:'Write a function <code>length</code> that takes a string and returns the number of characters of the string.\n<code>length(\'sun\')</code> should return <code>3</code>.',tests:[function(){return jshero.testutil.assert_isFunction('length')},function(){return jshero.testutil.assert_functionHasNumOfParameter('length',1)},function(){return jshero.testutil.assert_functionReturns('length(\'sun\')',3)},function(){return jshero.testutil.assert_functionReturns('length(\'Hello world!\')',12)},function(){return jshero.testutil.assert_functionReturns('length(\'\')',0)}]});
jshero.koans.add({id:'stringsplit',title:'String: split()',lesson:'The <code>split</code> method splits a string into substrings using a separator string.\nThe substrings are returned as an array. The original string is not changed.\n\n<pre><code>var date = \'31-10-2017\';\nvar parts = date.split(\'-\');\nvar day = parts[0]; // \'31\'\nvar month = parts[1]; // \'10\'\nvar year = parts[2]; // \'2017\'</code></pre>\n\nHere, the separator string is the hyphen. It splits the date string into three parts.\nThese three parts are assigned as an array to the variable <code>parts</code>.\nAfterwards, the individual parts are assigned to separate variables.',task:'Write a function <code>add</code> that takes a string with a summation task and returns its result as a\nnumber. The summation task is a string of the form \'1+19+...+281\'.\n<code>add(\'7+12+100\')</code> should return <code>119</code>.',tests:[function(){return jshero.testutil.assert_isFunction('add')},function(){return jshero.testutil.assert_functionHasNumOfParameter('add',1)},function(){return jshero.testutil.assert_functionReturns('add(\'1+2\')',3)},function(){return jshero.testutil.assert_functionReturns('add(\'12+5+1+10\')',28)},function(){return jshero.testutil.assert_functionReturns('add(\'13+2+4+100+3\')',122)},function(){return jshero.testutil.assert_functionReturns('add(\'50000+4000+300+20+1\')',54321)}]});
jshero.koans.add({id:'stringsubstr',title:'String: substr()',lesson:'The <code>substr</code> method extracts a substring from a string:\n\n<pre><code>var see = \'see and stop\'.substr(0, 3);\nvar and = \'see and stop\'.substr(4, 3);\nvar stop = \'see and stop\'.substr(8);</code></pre>\n\nThe first parameter specifies the position at which to start extracting.\nThe second parameter specifies the number of characters to extract.\nIf the second parameter is not set, all the characters from start position to the end of the string are extracted.',task:'Write a function <code>firstWord</code>, taking a string and returning the first word in that string.\nThe first word are all characters up to the first space.\n<code>firstWord(\'see and stop\')</code> should return <code>\'see\'</code>.',hint:'<pre><code>var firstWord = function(s) {\n// Determine with indexOf\n// the position of the\n// first space. Then use\n// the substr method.\n};</code></pre>',solution:'<pre><code>var firstWord = function(s) {\n  var firstBlank = s.indexOf(\' \');\n  return s.substr(0, firstBlank);\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('firstWord')},function(){return jshero.testutil.assert_functionHasNumOfParameter('firstWord',1)},function(){return jshero.testutil.assert_functionReturns('firstWord(\'see and stop\')','see')},function(){return jshero.testutil.assert_functionReturns('firstWord(\'speak again\')','speak')}]});
jshero.koans.add({id:'stringupper',title:'String: toUpperCase()',lesson:'In addition to the <code>length</code> property, strings have methods.\nThese are functions that are applied to the string. Like the <code>length</code> property,\nthese methods are appended with a point to the string or to a variable that contains a string.\nThe arguments enclosed in parentheses follow. Two of these string methods are the parameterless\nmethods <code>toUpperCase</code> and <code>toLowerCase</code>. They return the string in\nuppercase or lowercase.\n\n<pre><code>var town = \'Mthatha\';\nvar output = town.toUpperCase();</code/></pre>\n\n<code>output</code> has the value <code>\'MTHATHA\'</code>.\n<code>town</code> still has the value <code>\'Mthatha\'</code>.\n\n<pre><code>output = town.toLowerCase();</code/></pre>\n\nNow <code>output</code> has the value <code>\'mthatha\'</code>.',task:'Write a function <code>toCase</code> that takes a string and returns that string in\nlowercase and uppercase with <code>-</code> as delimiter.\n<code>toCase(\'Mthatha\')</code> should return <code>\'mthatha-MTHATHA\'</code>.',hint:'<pre><code>var toCase = function(text) {\n  return ... + \'-\' + ...;\n};</code></pre>',solution:'<pre><code>var toCase = function(text) {\n  return text.toLowerCase() + \'-\' + text.toUpperCase();\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('toCase')},function(){return jshero.testutil.assert_functionHasNumOfParameter('toCase',1)},function(){return jshero.testutil.assert_functionReturns('toCase(\'Mthatha\')','mthatha-MTHATHA')},function(){return jshero.testutil.assert_functionReturns('toCase(\'Johannesburg\')','johannesburg-JOHANNESBURG')}]});
jshero.koans.add({id:'trim',title:'String: trim()',lesson:'The <code>trim</code> method removes whitespaces from both ends of a string.\n\n<pre><code>var input = \' Rosa Parks \';\nvar name = input.trim();</code></pre>\n\n<code>name</code> contains the string <code>\'Rosa Parks\'</code>.\nNotice that <code>input</code> still contains the string <code>\' Rosa Parks \'</code>.',task:'Write a function <code>firstChar</code>, which returns the first character that is not a space\nwhen a string is passed. <code>firstChar(\' Rosa Parks \')</code> should return <code>\'R\'</code>.',hint:'<pre><code>var firstChar = function(text) {\n// Trim first.\n// Then use the\n// charAt method.\n};</code></pre>',solution:'<pre><code>var firstChar = function(text) {\n  var trimmedText = text.trim();\n  return trimmedText.charAt(0);\n};</code></pre>',tests:[function(){return jshero.testutil.assert_isFunction('firstChar')},function(){return jshero.testutil.assert_functionHasNumOfParameter('firstChar',1)},function(){return jshero.testutil.assert_functionReturns('firstChar(\'Rosa\')','R')},function(){return jshero.testutil.assert_functionReturns('firstChar(\' Louise\')','L')},function(){return jshero.testutil.assert_functionReturns('firstChar(\'  Parks\')','P')}]});
jshero.koans.add({id:'var',title:'Variables',lesson:'<a href=\'https://en.wikipedia.org/wiki/JavaScript\'>JavaScript</a> programs consist of a series of statements.\nEach statement performs an elementary operation.\nBy executing many instructions you can finally solve complex tasks.\nEach statement is written in a line and closed with a semicolon.<br><br>\nAn elementary statement is the declaration and initialization of a variable. A variable is a container for a value. The statement\n<pre><code>var city = \'Porbandar\';</code></pre>\ndeclares a variable with the name <code>city</code> and initializes it with the value <code>\'Porbandar\'</code>.\nThe variable is declared with the keyword <code>var</code>.\nUse the equals sign, the assignment operator, to assign a value to the variable.\nNote: JavaScript is case-sensitive. <code>city</code> and <code>City</code> are two different variables.',task:'Declare a variable <code>firstname</code> and initialize it with the value <code>\'Lata\'</code>.',hint:'<pre><code>var firstname = ...</code></pre>',solution:'<pre><code>var firstname = \'Lata\';</code></pre>',tests:[function(){return jshero.testutil.assert_variableDefined('firstname')},function(){return jshero.testutil.assert_variableHasValue('firstname','Lata')}]});
jshero.koans.add({id:'var2',title:'Several variables',lesson:'Several variables are declared and initialized in 2 program lines:\n<pre><code>var city = \'Lubumbashi\';\nvar country = \'Congo\';</code></pre>',task:'Declare a variable <code>flower</code> and assign it the value <code>\'rose\'</code>.\nDeclare a second variable <code>tree</code> and assign it the value <code>\'maple\'</code>.',tests:[function(){return jshero.testutil.assert_variableDefined('flower')},function(){return jshero.testutil.assert_variableHasValue('flower','rose')},function(){return jshero.testutil.assert_variableDefined('tree')},function(){return jshero.testutil.assert_variableHasValue('tree','maple')}]});
jshero.koans.add({id:'while',title:'while loop',lesson:'The <code>while</code> loop has only a loop condition.\nThe loop code is executed as long as the condition is <code>true</code>.\nIf the condition results in <code>false</code>, the loop is terminated\nand the code execution proceeds after the loop.\n\n<pre><code>var threeX = \'\';\nwhile (threeX.length < 3) {\n  threeX = threeX + \'x\';\n}</code></pre>\n\nAs long as <code>threeX</code> has less than 3 characters, it is supplemented by <code>\'x\'</code>.\nIf <code>threeX</code> has the length 3, the loop is terminated.\n<code>threeX</code> has the value <code>\'xxx\'</code>.',task:'Write a function <code>spaces</code> that takes a natural number n and returns a string of n spaces.\n<code>spaces(1)</code> should return <code>\' \'</code>.',tests:[function(){return jshero.testutil.assert_isFunction('spaces')},function(){return jshero.testutil.assert_functionHasNumOfParameter('spaces',1)},function(){return jshero.testutil.assert_functionReturns('spaces(0)','')},function(){return jshero.testutil.assert_functionReturns('spaces(1)',' ')},function(){return jshero.testutil.assert_functionReturns('spaces(2)','  ')},function(){return jshero.testutil.assert_functionReturns('spaces(3)','   ')}]});
jshero.koans.add({id:'xor',title:'XOR',lesson:'The Boolean operators have an order: First NOT, then AND, last OR.\nIf you want to change this order, use parentheses:\n\n<pre><code>var x1 = true || false && false;\nvar x2 = (true || false) && false;\nvar x3 = !false && false;\nvar x4 = !(false && false);</code></pre>\n\nIn the 1st line <code>&&</code> is evaluated first. <code>x1</code> is <code>true</code>.\nIn the 2nd line <code>||</code> is evaluated first. <code>x2</code> is <code>false</code>.\nIn the 3rd line <code>!</code> is evaluated first. <code>x3</code> is <code>false</code>.\nIn the 4th line <code>&&</code> is evaluated first. <code>x4</code> is <code>true</code>.<br><br>\n\nIn the following task you should code another important gate, the XOR (eXclusive OR) gate.',task:'Write a function <code>xor</code> that takes two Boolean values. If both values are different, the result should be <code>true</code>.\nIf both values are the same, the result should be <code>false</code>. The calls <code>xor(true, false)</code> and\n<code>xor(false, true)</code> should return <code>true</code>.\nThe calls <code>xor(true, true)</code> and <code>xor(false, false)</code> should return <code>false</code>.',tests:[function(){return jshero.testutil.assert_isFunction('xor')},function(){return jshero.testutil.assert_functionHasNumOfParameter('xor',2)},function(){return jshero.testutil.assert_functionReturns('xor(true, true)',false)},function(){return jshero.testutil.assert_functionReturns('xor(false, false)',false)},function(){return jshero.testutil.assert_functionReturns('xor(true, false)',true)},function(){return jshero.testutil.assert_functionReturns('xor(false, true)',true)}]});
jshero.koans.initReorder(['var','jsx01','var2','jsx02','jsx03','function','function2','functioncall','jsx04','parameter','jsx05','string','jsx06','jsx06b','log1','log2','log','jsx07','stringlength','stringupper','stringcharat','trim','stringindexof','stringindexof2','stringsubstr','replace','number','increment','fahrenheit','modulo','mean','math','minmax','pi','round','random','bool','nor','xor','equals','equals2','even','notequals','greaterthan','if','else','elseif','array','array2','array3','arraylength','arraysort','arraypush','arrayindexof','concat','slice','join','dimarray','comment','for1','factorial','for2','while','dowhile','ggt','break','doubleloop','arguments','stringsplit','roman1a','roman2','further']);
