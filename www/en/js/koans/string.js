(function(testutil){jshero.koans.add({id:"string",title:"Strings",lesson:"We have seen that a variable is a container for a value. A value can be a text like <code>'Hello world!'</code>.\nValues have a type. The type of <code>'Hello world!'</code> is string. You can use single or double quotes.\n<code>'Hello world!'</code> is the same string as <code>\"Hello world!\"</code>.<br>\nYou can work with strings. For example, they can be concatenated. This is done with the <code>+</code> sign.\n<code>'Java' + 'Script'</code> results in the string <code>'JavaScript'</code>.\nThe following function appends <code>' is great!'</code> to the passed parameter and returns the result:\n\n<pre><code>function praise(name) {\n  return name + ' is great!';\n}</code></pre>\n\n<code>praise('JavaScript')</code> will return <code>'JavaScript is great!'</code>.",task:"Write a function <code>greet</code> having one parameter and returning <code>'Hello &lt;parameter&gt;!'</code>.<br><br>\nExample: <code>greet('Ada')</code> should return <code>'Hello Ada!'</code> and <code>greet('Grace')</code> should return\n<code>'Hello Grace!'</code>.",hint:"<pre><code>function greet(name) {\n  return ...\n}</code></pre>",solution:"<pre><code>function greet(name) {\n  return 'Hello ' + name + '!';\n}</code></pre>",tests:[function(){return testutil.assert_isFunction("greet")},function(){return testutil.assert_functionHasNumOfParameter("greet",1)},function(){return testutil.assert_functionReturns("greet('Ada')","Hello Ada!")},function(){return testutil.assert_functionReturns("greet('Grace')","Hello Grace!")},function(){return testutil.assert_functionReturns("greet('Joan')","Hello Joan!")}]})})(jshero.testutil);