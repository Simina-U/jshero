jshero.koans.add({id:"break",title:"break and continue",lesson:"<code>break</code> terminates the current loop. The program continues after the loop.\n\n<pre><code>var words = 'blue white red';\nvar indexFirstSpace = -1;\nfor (var i = 0; i < words.length; i++) {\n  if (words.charAt(i) === ' ') {\n    indexFirstSpace = i;\n    break;\n  }\n}</code></pre>\n\nIf the character with the index <code>i</code> in <code>words</code> is a space, the <code>if</code> condition is fulfilled. \n<code>indexFirstSpace</code> gets the value of the loop variable <code>i</code>. Now, <code>break</code> will be\nexecuted. The loop will be terminated and the program execution continues after the loop.<br><br>\n\n<code>continue</code> terminates the current loop iteration. The program execution jumps to the loop head.\n\n<pre><code>var sum = 0;\nfor (var i = 0; i < 10; i++) {\n  if (i % 2 === 0) {\n    continue;\n  }\n  sum = sum + i;\n}</code></pre>\n\nIf <code>i</code> is an odd number, the following applies: i modulo 2 = 1. The <code>if</code> condition is not fulfilled. \nCode execution continues after <code>if</code> and <code>i</code> is added to <code>sum</code>. \nIf <code>i</code> is an even number, the following applies: i modulo 2 = 0. The <code>if</code> condition is fulfilled and \n<code>continue</code> will be excecuted. The code execution jumps directly to the loop head.\n<code>i</code> is not added to <code>sum</code>. So all odd numbers smaller than 10 are added up.<br><br>\n\n<code>break</code> and <code>continue</code> can be used in all loops (for, while, do...while).",task:"Write a function <code>isPrime</code> that checks whether a passed number is\n<a href=\"https://en.wikipedia.org/wiki/Prime_number\">prime</a>.\nIn case of a prime number it should return <code>true</code>, otherwise <code>false</code>.\nThe call <code>isPrime(2)</code> should return <code>true</code> and <code>isPrime(4)</code> should return\n<code>false</code>.",tests:[function(){return jshero.testutil.assert_isFunction("isPrime")},function(){return jshero.testutil.assert_functionHasNumOfParameter("isPrime",1)},function(){return jshero.testutil.assert_functionReturns("isPrime(1)",false)},function(){return jshero.testutil.assert_functionReturns("isPrime(2)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(3)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(4)",false)},function(){return jshero.testutil.assert_functionReturns("isPrime(11)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(281)",true)},function(){return jshero.testutil.assert_functionReturns("isPrime(351)",false)}]});