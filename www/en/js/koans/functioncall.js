jshero.koans.add({id:"functioncall",title:"Function calls",lesson:"The difference between the definition and the call of a function is important.\nThe following definition of a function\n\n<pre><code>let f = function() {\n  return 'hello';\n};</code></pre>\n\nsays what the function will do: Return 'hello', if called. The function will not be executed, but only provided.\nOnly with its call\n\n<pre><code>let x = f();</code></pre>\n\nthe function is executed. Every instruction in the function block is executed in order.\nThe result of the function in the example above will be assigned to the variable <code>x</code>.\nTo define a function use the keyword <code>function</code>.\nIf the function is assigned to a variable, the function is called via this variable.\nFunctions are defined once so that they can be used multiple times at different program points by calling them.",task:"1. Define a function <code>greet</code> returning the value <code>'Haydo!'</code>.<br/>\n2. Declare a variable <code>salutation</code>. Call the function <code>greet</code> and assign the\nresult of the call to the variable <code>salutation</code>.",hint:"<pre><code>let greet = function() {\n  ...\n};\n\nlet salutation = ...</code></pre>",solution:"<pre><code>let greet = function() {\n  return 'Haydo!';\n};\n\nlet salutation = greet();</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("greet")},function(){return jshero.testutil.assert_functionReturns("greet()","Haydo!")},function(){return jshero.testutil.assert_variableDefined("salutation")},function(){return jshero.testutil.assert_variableHasValue("salutation","Haydo!")}]});