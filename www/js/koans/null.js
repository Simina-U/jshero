jshero.koans.add({id:"null",title:"null",lesson:"Neben <code>undefined</code> kennt JavaScript einen weiteren Wert f\xFCr die Abwesentheit eines sinnvollen\nWerts: <code>null</code>. Man kann einer Variablen den Wert <code>null</code> zuordnen und testet mit strikter\nGleichheit auf diesen Wert:\n\n<pre><code>let foo = null;\nif (foo === null) {\n  foo = 1;\n}</code></pre>\n\nEs ist ein Design-Fehler, dass JavaScript zwei Werte f\xFCr \"kein Wert\" besitzt. Wenn m\xF6glich, sollte man\n<code>undefined</code> und <code>null</code> gleich behandeln.",task:"Schreibe eine Funktion <code>cutComment</code>, die eine Zeile JavaScript entgegennimmt\nund einen m\xF6glichen Zeilenkommentar getrimmt zur\xFCckgibt. Enth\xE4lt die Zeile keinen Kommentar, soll <code>null</code>\nzur\xFCckgegeben werden. Ein\xADfach\xADheits\xADhal\xADber gehen wir davon aus, dass der Code kein Kommentar-Zeichen innerhalb\neines Strings enth\xE4lt.<br><br>\nBeispiel: <code>cutCommt('let foo; // bar')</code> sollte <code>'bar'</code> zur\xFCckgeben.",tests:[function(){return jshero.testutil.assert_isFunction("cutComment")},function(){return jshero.testutil.assert_functionHasNumOfParameter("cutComment",1)},function(){return jshero.testutil.assert_functionReturns("cutComment('let foo; // bar')","bar")},function(){return jshero.testutil.assert_functionReturns("cutComment('let n; // Number')","Number")},function(){return jshero.testutil.assert_functionReturns("cutComment('let i;')",null)}]});