jshero.koans.add({id:"string1",title:"Strings",lesson:"Wir haben gesehen, dass eine Variable ein Beh\xE4lter f\xFCr einen Wert ist. Werte besitzen dabei einen Typ.\nSo kann ein Wert eine Zahl wie <code>7.12</code> sein. Der Typ von <code>7.12</code> ist Zahl. Oder ein Wert kann\nein Text wie <code>'Hallo Welt!'</code> sein. Der Typ von <code>'Hallo Welt!'</code> ist Text. Diesen Typ bezeichnet\nman auch als Zeichenkette oder String. Dabei kann man einfache oder doppelte Anf\xFChrungszeichen verwenden.\nSo ist <code>'Hallo Welt!'</code> derselbe String wie <code>\"Hallo Welt!\"</code>.<br>Mit Strings kann man arbeiten.\nMan kann sie zum Beispiel verketten. Dies macht man mit dem <code>+</code> Zeichen. <code>'Blau' + 'meier'</code>\nergibt den String <code>'Blaumeier'</code>.<br>Die folgende Funktion h\xE4ngt an dem \xFCbergebenen Parameter einen Text\nan und gibt den zusammengesetzten Text zur\xFCck:\n\n<pre><code>function praise(name) {\n  return name + ' ist toll!';\n}</code></pre>\n\nSo liefert <code>praise('JavaScript')</code> den Wert <code>'JavaScript ist toll!'</code>.",task:"Schreibe eine Funktion <code>welcome</code>, die einen Parameter entgegennimmt und die\n<code>'Hallo &lt;Parameter&gt;!'</code> zur\xFCckgibt.<br><br>\nBeispiel: \xDCbergibt man der Funktion <code>welcome</code> den Wert <code>'Ada'</code>,\nso sollte die Funktion <code>'Hallo Ada!'</code> zur\xFCckgeben.",hint:"<pre><code>function welcome(name) {\n  return ...\n}</code></pre>",solution:"<pre><code>function welcome(name) {\n  return 'Hallo ' + name + '!';\n}</code></pre>",tests:[function(){return jshero.testutil.assert_isFunction("welcome")},function(){return jshero.testutil.assert_functionHasNumOfParameter("welcome",1)},function(){return jshero.testutil.assert_functionReturns("welcome('Ada')","Hallo Ada!")},function(){return jshero.testutil.assert_functionReturns("welcome('Marianne')","Hallo Marianne!")},function(){return jshero.testutil.assert_functionReturns("welcome('Mitchell')","Hallo Mitchell!")}]});