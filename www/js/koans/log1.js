(function(testutil){jshero.koans.add({id:"log1",title:"Logging",lesson:"Programmieren beinhaltet immer auch die Suche nach Fehlern.\nEine M\xF6glichkeit Fehler zu finden ist das <a href='https://de.wikipedia.org/wiki/Logging'>Loggen</a>.\nMan macht w\xE4hrend der Programmausf\xFChrung gezielte Ausgaben.\nIn JavaScript verwendet man daf\xFCr die Funktion <code>console.log</code>:\n\n<pre><code>console.log('Hallo Konsole!');</code></pre>\n\nHier wird der String <code>'Hallo Konsole!'</code> mit <code>console.log</code> ausgegeben.\nWo man die Ausgabe zu sehen bekommt, h\xE4ngt von der JavaScript-Umgebung ab.\nIn Browsern sieht man die Log-Ausgabe im normalen Betrieb nicht.\nDoch die meisten Desktop-Browser besitzen sogenannte <a href='https://de.wikipedia.org/wiki/Entwicklerwerkzeuge_in_Webbrowsern'> Entwicklerwerkzeuge</a>.\nDas sind m\xE4chtige Tools zur Unterst\xFCtzung von Webentwicklern. Eines dieser Tools ist die Konsole.\nDort wird das Log ausgegeben. Wie man die Entwickler-Werkzeuge \xF6ffnet h\xE4ngt vom jeweiligen Browser ab.\nBei vielen Desktop-Browsern wird sie mit der Taste F12 ge\xF6ffnet.\nDie Konsole kannst du dann als Reiter ausw\xE4hlen. Alternativ kann man die Konsole \xFCber das Browser-Men\xFC \xF6ffnen.\nAuf mobilen Ger\xE4ten stehen die Entwickler-Werkzeuge nicht zur Verf\xFCgung.\nDeshalb schreibt JS Hero das Log zus\xE4tzlich in die Testausgabe.",task:"Schreibe eine Funktion <code>logge</code>, die den String <code>'Hallo Konsole!'</code> loggt.\nArbeitest du mit einem Desktop-Browser \xF6ffne zus\xE4tzlich die Entwickler-Tools, um auch dort die Ausgabe zu sehen.",hint:"<pre><code>var logge = function() {\n  console.log(...);\n};</code></pre>",solution:"<pre><code>var logge = function() {\n  console.log('Hallo Konsole!');\n};</code></pre>",tests:[function(){return testutil.assert_isFunction("logge")},function(){return testutil.assert_functionLogs("logge()","Hallo Konsole!")}]})})(jshero.testutil);