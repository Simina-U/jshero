(function(ArrayUtil){jshero.koans.add({id:"bubblesort",title:"Bubblesort",lesson:"H\xE4ufig m\xF6chte man Daten der Gr\xF6\xDFe nach sortieren. Hierf\xFCr gibt es verschiedene Sortierverfahren. Ein bekanntes,\neinfaches, aber auch langsames Verfahren ist <a href=\"https://de.wikipedia.org/wiki/Bubblesort\">Bubblesort</a>.\nLiegen die zu sortierenden Daten in einem Array der L\xE4nge n vor und sollen die Daten aufsteigend sortiert werden,\nso wird in einer sogenannten Bubble-Phase das Array vom 1 &apos;ten bis zum n-1 &apos;ten Element durchlaufen.\nDabei wird in jedem Schritt das aktuelle Element an der Stelle i mit dem nachfolgenden Element an der Stelle i+1 verglichen.\nIst das Element an der Stelle i gr\xF6\xDFer als das Element an der Stelle i+1, so vertauscht man beide Elemente.\nHat man so eine Bubble-Phase durchlaufen, ist das gr\xF6\xDFte Element am Ende des Arrays angekommen.\nWiederholt man nun eine Bubble-Phase, so steht auch das zweitgr\xF6\xDFte Element an der richtigen Stelle.\nHat man n-1 Bubble-Phasen durchlaufen, ist das komplette Array sortiert.\nUm ein Array mit 4 Zahlen zu sortieren, ben\xF6tigt man also drei Bubble-Phasen:\n\n<pre><code>Erste Bubble-Phase:\n[4, 2, 3, 1] -> [2, 4, 3, 1] Das erste Element wird mit dem zweiten verglichen. Sie werden vertauscht, da 4>2 ist.\n[2, 4, 3, 1] -> [2, 3, 4, 1] Das zweite Element wird mit dem dritten verglichen. Sie werden vertauscht, da 4>3 ist.\n[2, 3, 4, 1] -> [2, 3, 1, 4] Das dritte Element wird mit dem vierten verglichen. Sie werden vertauscht, da 4>1 ist.\nDas gr\xF6\xDFte Element ist an die richtige Stelle geblubbert.\n\nZweite Bubble-Phase:\n[2, 3, 1, 4] -> [2, 3, 1, 4] Das erste Element wird mit dem zweiten verglichen. Sie werden nicht vertauscht, da 2<3 ist.\n[2, 3, 1, 4] -> [2, 1, 3, 4] Das zweite Element wird mit dem dritten verglichen. Sie werden vertauscht, da 3>1 ist.\n[2, 1, 3, 4] -> [2, 1, 3, 4] Das dritte Element wird mit dem vierten verglichen. Sie werden nicht vertauscht, da 3<4 ist.\nDas zweitgr\xF6\xDFte Element ist an die richtige Stelle geblubbert.\n\nDritte Bubble-Phase:\n[2, 1, 3, 4] -> [1, 2, 3, 4] Das erste Element wird mit dem zweiten verglichen. Sie werden vertauscht, da 2>1 ist.\n[1, 2, 3, 4] -> [1, 2, 3, 4] Das zweite Element wird mit dem dritten verglichen. Sie werden nicht vertauscht, da 2<3 ist.\n[1, 2, 3, 4] -> [1, 2, 3, 4] Das dritte Element wird mit dem vierten verglichen. Sie werden vertauscht, da 3<4 ist.\nDas drittgr\xF6\xDFte Element ist an die richtige Stelle geblubbert.\nDamit ist automatisch auch das kleinste Element an der richtigen Stelle.\nDas Array ist aufsteigend sortiert.</code></pre>",task:"Schreibe eine Funktion <code>sort</code>, die ein mit Zahlen gef\xFClltes Array entgegennimmt und die diese Zahlen\naufsteigend sortiert als Array zur\xFCckgibt. Wird ein leeres Array \xFCbergeben, so soll auch ein leeres Array zur\xFCckgegeben\nwerden. <code>sort([4,&nbsp;2,&nbsp;3,&nbsp;1])</code> sollte <code>[1,&nbsp;2,&nbsp;3,&nbsp;4]</code> ergeben.",tests:[function(){return jshero.testutil.assert_isFunction("sort")},function(){return jshero.testutil.assert_functionHasNumOfParameter("sort",1)},function(){return jshero.testutil.assert_functionReturns("sort([])",[])},function(){return jshero.testutil.assert_functionReturns("sort([1])",[1])},function(){return jshero.testutil.assert_functionReturns("sort([3, 1])",[1,3])},function(){return jshero.testutil.assert_functionReturns("sort([3, 1, 2])",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("sort([3, 2, 1])",[1,2,3])},function(){return jshero.testutil.assert_functionReturns("sort([5, 4, 3, 2, 1])",[1,2,3,4,5])},function(){return jshero.testutil.assert_functionReturns("sort(['c', 'a', 'b'])",["a","b","c"])}]})})(jshero.array);