(function(testutil){jshero.koans.add({id:"parameter",title:"Parameter",lesson:"Jetzt lernen wir Funktionen mit Parametern kennen. Mit\n\n  <pre><code>function gebe(eingabe) {\n  return eingabe;\n};</code></pre>\n\ndefinieren wir eine Funktion, die den \xFCbergebenen Parameter <code>eingabe</code> einfach wieder zur\xFCckgibt.\nParameter sind Variablen. Sie stehen in der runden Klammer und ben\xF6tigen nicht das Schl\xFCsselwort <code>let</code> zu\nihrer Deklaration. Mit\n\n<pre><code>let ergebnis = gebe('Apfel');</code></pre>\n\nwird die Funktion mit dem Argument <code>'Apfel'</code> aufgerufen. Jetzt wird unsere zuvor definierte Funktion\nausgef\xFChrt. Dabei wird zun\xE4chst das Argument <code>'Apfel'</code> dem Parameter <code>eingabe</code> zugewiesen.\n<code>eingabe</code> hat jetzt den Wert <code>'Apfel'</code>. In der einzigen Codezeile der Funktion wird nun die\nVariable <code>eingabe</code> mit der <code>return</code>-Anweisung zur\xFCckgegeben. Diese R\xFCckgabe wird der Variablen\n<code>ergebnis</code> zugewiesen. <code>ergebnis</code> hat dann auch den Wert <code>'Apfel'</code>.",task:"Schreibe eine Funktion <code>echo</code>, die ebenfalls den \xFCbergebenen Parameter wieder zur\xFCckgibt.",hint:"<pre><code>function echo(ton) {\n  ...\n};</code></pre>",solution:"<pre><code>function echo(ton) {\n  return ton;\n};</code></pre>",tests:[function(){return testutil.assert_isFunction("echo")},function(){return testutil.assert_functionHasNumOfParameter("echo",1)},function(){return testutil.assert_functionReturns("echo('Greta')","Greta")},function(){return testutil.assert_functionReturns("echo('CO2')","CO2")}]})})(jshero.testutil);