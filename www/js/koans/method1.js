(function(testutil,evaluator){jshero.koans.add({id:"method1",title:"Methoden",lesson:"Bisher waren die Werte von Objekt-Eigenschaften Daten wie Strings oder Zahlen.\nObjekt-Eigenschaften k\xF6nnen aber auch Funktionen sein. Solche Objekt-Eigenschaften nennt man\nMethoden. Methoden operieren auf den Daten eines Objekts.\n\n<pre><code>var ware = {\n  name: '\xC4pfel',\n  preis: 2.15,\n  erhoehePreis: function(erhoehung) {\n    this.preis = this.preis + erhoehung;\n  }\n};\n\nvar alterPreis = ware.preis;\nware.erhoehePreis(0.05);\nvar neuerPreis = ware.preis;</code></pre>\n\nDas Objekt <code>ware</code> besitzt die Methode <code>erhoehePreis</code>. Diese Methode greift mithilfe von\n<code>this</code> auf die Objekt-Eigenschaft <code>preis</code> zu. <code>this</code> steht innerhalb eines Objekts f\xFCr\ndas Objekt selbst. Mit der bekannten Punkt-Notation kann man nun auf die Objekt-Eigenschaften zugreifen und sie\nver\xE4ndern.<br>\nVon au\xDFen wird eine Methode \xFCber die zugeordnete Variable und der Punkt-Notation aufgerufen.",task:"Definiere ein Objekt mit den beiden Eigenschaften <code>x</code> und <code>y</code> sowie einer Methode\n<code>moveX</code>. <code>x</code> und <code>y</code> sollen den Wert <code>0</code> erhalten. <code>moveX</code>\nsoll den Wert von <code>x</code> um <code>1</code> erh\xF6hen. Weise das Objekt einer Variablen <code>point</code> zu.",tests:[function(){return testutil.assert_variableDefined("point")},function(){var out=evaluator.evalTest("point");var ok,msg;if(out===null){ok=false;msg="<code>point</code> ist <code>null</code>."}else if(out.x===0){ok=true;msg="<code>point.x</code> hat den Wert <code>0</code>."}else{ok=false;msg="<code>point.x</code> hat nicht den Wert <code>0</code>, sondern <code>"+out.x+"</code>."}return{ok:ok,msg:msg}},function(){var out=evaluator.evalTest("point");var ok,msg;if(out.y===0){ok=true;msg="<code>point.y</code> hat den Wert <code>0</code>."}else{ok=false;msg="<code>point.y</code> hat nicht den Wert <code>0</code>, sondern <code>"+out.y+"</code>."}return{ok:ok,msg:msg}},function(){return testutil.assert_isFunction("point.moveX")},function(){var out=evaluator.evalTest("point");var ok,msg;out.moveX();if(out.x===1&&out.y===0){ok=true;msg="<code>moveX</code> verschiebt den Punkt von (0, 0) nach (1, 0)."}else{ok=false;msg="<code>moveX</code> verschiebt den Punkt von (0, 0) nicht nach (1, 0), sondern nach ("+out.x+", "+out.y+")."}return{ok:ok,msg:msg}}]})})(jshero.testutil,jshero.evaluator);