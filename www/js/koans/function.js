(function(testutil){jshero.koans.add({id:"function",title:"Funktionen",lesson:"Eine Funktion ist ein Block von Anweisungen, der beliebig oft ausgef\xFChrt werden kann. Eine Funktion kann\nParameter entgegennehmen und eine Funktion kann einen Wert zur\xFCckgeben. Funktionen werden mit dem Schl\xFCsselwort\n<code>function</code> definiert. Darauf folgen in runden Klammern eingeschlossen die Parameter und anschlie\xDFend,\neingeschlossen in geschweiften Klammern, die Anweisungen. Mit dem Schl\xFCsselwort <code>return</code> kann ein Wert\nzur\xFCckgegeben werden. Gleichzeitig beendet <code>return</code> die Funktion. Anweisungen nach einem <code>return</code>\nwerden nicht mehr ausgef\xFChrt. Funktionen kann man Variablen zuordnen. Mit\n\n<pre><code>var farbe = function() {\n  return 'gr\xFCn';\n};</code></pre>\n\ndefinieren wir eine Funktion, die <code>'gr\xFCn'</code> zur\xFCckgibt. Die Funktion nimmt keine Paramter entgegen\n(die runde Klammer ist leer) und sie enth\xE4lt genau eine Anweisung, die R\xFCckgabe. Die Funktion wird der Variablen\n<code>farbe</code> zugeordnet. \xDCber diese Variable wird die Funktion aufgerufen:\n\n<pre><code>var ergebnis = farbe();</code></pre>\n\nJetzt wird die Funktion ausgef\xFChrt. Ihre R\xFCckgabe wird der Variablen <code>ergebnis</code> zugewiesen.\n<code>ergebnis</code> hat dann den Wert <code>'gr\xFCn'</code>.",task:"Deklariere eine Variable <code>hallo</code> und weise ihr eine Funktion zu, die <code>'Hallo Welt!'</code> zur\xFCckgibt.",hint:"<pre><code>var hallo = function() {\n  ...\n};</code></pre>",solution:"<pre><code>var hallo = function() {\n  return 'Hallo Welt!';\n};</code></pre>",tests:[function(){return testutil.assert_isFunction("hallo")},function(){return testutil.assert_functionReturns("hallo()","Hallo Welt!")}]})})(jshero.testutil);