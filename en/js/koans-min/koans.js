jshero.koans.add({id:'array',title:'Creating arrays',lesson:'Arrays are objects for storing multiple values. Arrays are preferably created with square brackets.'+'<pre><code>var languages = ["C", "C++", "Java"];<br>'+'var primes = [2, 3, 5, 7, 11];<br>'+'var emptyArray = [];<br>'+'var a = "Douglas";<br>'+'var b = 12;<br>'+'var c = true;<br>'+'var someValues = [a, b, c];</code></pre>',task:'Write a function <code>toArray</code> that takes 2 values and returns these values in an array. '+'<code>toArray(5,&nbsp;9)</code> should return the array <code>[5,&nbsp;9]</code>.',beforeTests:function(){if(typeof toArray!=='undefined'){toArray=undefined}},tests:[function(){var ok=typeof toArray==='function';var msg;if(ok){msg='<code>toArray</code> is a function.'}else{msg='<code>toArray</code> is not a funktion.'}return{ok:ok,msg:msg}},function(){var ok=toArray.length===2;var msg;if(ok){msg='<code>toArray</code> has 2 parameters.'}else{msg='<code>toArray</code> has not 2, but '+toArray.length+' parameters.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=toArray(1,2);ok=Array.isArray(result);if(ok){msg='<code>toArray(1, 2)</code> returns an array.'}else{msg='<code>toArray(1, 2)</code> does not return an array.'}}catch(exc){ok=false;msg='Error when calling <code>toArray(1, 2)</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=toArray(1,2);ok=result.length===2&&result[0]===1&&result[1]===2;if(ok){msg='<code>toArray(1, 2)</code> returns <code>[1, 2]</code>.'}else{msg='<code>toArray(1, 2)</code> does not return <code>[1, 2]</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>toArray(1, 2)</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=toArray('Tom','Huckleberry');ok=Array.isArray(result)&&result.length===2&&result[0]==='Tom'&&result[1]==='Huckleberry';if(ok){msg='<code>toArray("Tom", "Huck")</code> returns <code>["Tom", "Huck"]</code>.'}else{msg='<code>toArray("Tom", "Huck")</code> does not return <code>["Tom", "Huck"]</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling toArray("Tom", "Huck")</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'array2',title:'Get array elements',lesson:'The elements of an array are accessed by an index beginning with 0. '+'<pre><code>var languages = ["C", "C++", "Java"];<br>'+'var c = languages[0];<br>'+'var cPlusPlus = languages[1];<br>'+'var java = languages[2];'+'</code></pre>',task:'Write a function <code>getFirstElement</code> that takes an array and returns the first element of the array. '+'<code>getFirstElement([1, 2])</code> should return <code>1</code>.',beforeTests:function(){if(typeof getFirstElement!=='undefined'){getFirstElement=undefined}},tests:[function(){var ok=typeof getFirstElement==='function';var msg;if(ok){msg='<code>getFirstElement</code> is a function.'}else{msg='<code>getFirstElement</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=getFirstElement.length===1;var msg;if(ok){msg='<code>getFirstElement</code> has 1 parameter.'}else{msg='<code>getFirstElement</code> has not 1 parameter, but '+getFirstElement.length+'.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=getFirstElement([1,2]);ok=result===1;if(ok){msg='<code>getFirstElement([1, 2])</code> returns <code>1</code>.'}else{msg='<code>getFirstElement([1, 2])</code> does not return <code>1</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>getFirstElement([1, 2])</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=getFirstElement(['Firefox','Chrome']);ok=result==='Firefox';if(ok){msg='<code>getFirstElement(["Firefox", "Chrome"])</code> returns <code>"Firefox"</code>.'}else{msg='<code>getFirstElement(["Firefox", "Chrome"])</code> does not return <code>"Firefox"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>getFirstElement(["Firefox", "Chrome"])</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'array3',title:'Set array elements',lesson:'Just as you can get array elements by an index, you can set them by this index. '+'It does not matter whether the array was previously filled or empty.'+'<pre><code>var languages = [];<br>'+'sprachen[0] = "C";<br>'+'sprachen[1] = "C++";<br>'+'sprachen[2] = "Java";<br>'+'</code></pre>'+'Here an empty array is filled successively with the listed values.',task:'Write a function <code>setFirstElement</code> that takes an array and an arbitrary variable. '+'The variable should be inserted as the first element in the array. The array should be returned. '+'<code>setFirstElement([1, 2], 3)</code> should return <code>[3, 2]</code>.',beforeTests:function(){if(typeof setFirstElement!=='undefined'){setFirstElement=undefined}},tests:[function(){var ok=typeof setFirstElement==='function';var msg;if(ok){msg='<code>setFirstElement</code> is a function.'}else{msg='<code>setFirstElement</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=setFirstElement.length===2;var msg;if(ok){msg='<code>setFirstElement</code> has 2 parameters.'}else{msg='<code>setFirstElement</code> has not 2 parameters, but '+setFirstElement.length+'.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=setFirstElement([1,2],3);ok=Array.isArray(result)&&result.length===2&&result[0]===3&&result[1]===2;if(ok){msg='<code>setFirstElement([1, 2], 3)</code> returns <code>[3, 2]</code>.'}else{msg='<code>setFirstElement([1, 2], 3)</code> does not return <code>[3, 2]</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>setFirstElement([1, 2], 3)</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=setFirstElement([],1);ok=Array.isArray(result)&&result.length===1&&result[0]===1;if(ok){msg='<code>setFirstElement([], 1)</code> returns <code>[1]</code>.'}else{msg='<code>setFirstElement([], 1)</code> does not return <code>[1]</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){e=exc;ok=false;msg='Error when calling <code>setFirstElement([], 1)</code>.'}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'arraylength',title:'Array: length',lesson:'Like strings, arrays have the property <code>length</code>. Here it returns the number of elements in the array:'+'<pre><code>var languages = [];<br>'+'var l0 = languages.length;<br>'+'languages[0] = "C";<br>'+'var l1 = languages.length;<br>'+'languages[1] = "C++";<br>'+'var l2 = languages.length;</code></pre>'+'The empty array contains no elements. <code>l0</code> is <code>0</code>. '+'Now we fill the array step by step. <code>l1</code> is <code>1</code> and <code>l2</code> is <code>2</code>.',task:'Write a function <code>getLastElement</code> that takes an array and returns the last element of the array. '+'<code>getLastElement([1, 2])</code> should return <code>2</code>.',beforeTests:function(){if(typeof setFirstElement!=='undefined'){setFirstElement=undefined}},tests:[function(){var ok=typeof getLastElement==='function';var msg;if(ok){msg='<code>getLastElement</code> is a function.'}else{msg='<code>getLastElement</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=getLastElement.length===1;var msg;if(ok){msg='<code>getLastElement</code> has 1 parameter.'}else{msg='<code>getLastElement</code> has not 1 parameter, but '+getLastElement.length+'.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=getLastElement([1,2]);ok=result===2;if(ok){msg='<code>getLastElement([1, 2])</code> returns <code>2</code>.'}else{msg='<code>getLastElement([1, 2])</code> does not return <code>2</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>getLastElement([1, 2])</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=getLastElement(['a','b','c']);ok=result==='c';if(ok){msg='<code>getLastElement(["a", "b", "c"])</code> returns <code>"c"</code>.'}else{msg='<code>getLastElement(["a", "b", "c"])</code> does not return <code>"c"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>getLastElement(["a", "b", "c"])</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'arraysort',title:'Sorting arrays',lesson:'Now we can sort arrays with given length.',task:'Write a function <code>sort</code> that takes an array filled with 3 numbers and returns these 3 numbers sorted in ascending order as an array. '+'<code>sort([2,&nbsp;3,&nbsp;1])</code> should return <code>[1,&nbsp;2,&nbsp;3]</code>.',beforeTests:function(){if(typeof sort!=='undefined'){sort=undefined}},tests:[function(){var ok=typeof sort==='function';var msg;if(ok){msg='<code>sort</code> is a function.'}else{msg='<code>sort</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=sort.length===1;var msg;if(ok){msg='<code>sort</code> has 1 parameter.'}else{msg='<code>sort</code> has not 1 parameter, but '+sort.length+'.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=sort([3,2,1]);ok=Array.isArray(result)&&result.length===3&&result[0]===1&&result[1]===2&&result[2]===3;if(ok){msg='<code>sort([3, 2, 1])</code> returns <code>[1, 2, 3]</code>.'}else{msg='<code>sort([3, 2, 1])</code> does not return <code>[1, 2, 3]</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>sort([3, 2, 1])</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=sort([2,3,1]);ok=Array.isArray(result)&&result.length===3&&result[0]===1&&result[1]===2&&result[2]===3;if(ok){msg='<code>sort([2, 3, 1])</code> returns <code>[1, 2, 3]</code>.'}else{msg='<code>sort([2, 3, 1])</code> does not return <code>[1, 2, 3]</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>sort([2, 3, 1])</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"bool",title:"Boolean",lesson:"Another important data type next to strings and numbers are Boolean values. They have only two values: "+"<code>true</code> and <code>false</code>. You can calculate with Boolean values similar to numbers. JavaScript has three Boolean operators: "+"<code>&&</code> (and), <code>||</code> (or) and <code>!</code> (not). "+"<code>&&</code> links two Boolean values. If both values are <code>true</code>, the result is <code>true</code>. In all other cases it is <code>false</code>. "+"With <code>||</code> the result is <code>true</code>, if at least one of the two input values is <code>true</code>. If both input values are <code>false</code>, "+"the result is <code>false</code>. <code>!</code> is applied to a single Boolean value and inverts this value: "+"<code>!true</code> is <code>false</code> and <code>!false</code> is <code>true</code>."+"<pre><code>var x1 = true && false;<br>var x2 = !x1;<br>var x3 = x1 || x2;</code></pre>"+"<code>x1</code> is <code>false</code>,  <code>x2</code> is <code>true</code> and <code>x3</code> is <code>true</code>.",task:"Write a function <code>nand</code> that takes two Boolean values. If both values are <code>true</code>, the result should be <code>false</code>. "+"In the other cases the return should be <code>true</code>. The call <code>nand(true, true)</code> "+"should return <code>false</code>. The calls <code>nand(true, false)</code>, <code>nand(false, true)</code> and <code>nand(false, false)</code> should return <code>true</code>.",beforeTests:function(){if(typeof nand!=="undefined"){nand=undefined}},tests:[function(){var ok=typeof nand==="function";var msg;if(ok){msg="<code>nand</code> is a function."}else{msg="<code>nand</code> is not a function."}return{ok:ok,msg:msg}},function(){var ok=nand.length===2;var msg;if(ok){msg="<code>nand</code> has 2 parameters."}else{msg="<code>nand</code> has not 2, but "+nand.length+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=nand(true,true);ok=result===false;if(ok){msg="<code>nand(true, true)</code> returns <code>false</code>."}else{msg="<code>nand(true, true)</code> does not return <code>false</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(true, true)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=nand(true,false);ok=result===true;if(ok){msg="<code>nand(true, false)</code> returns <code>true</code>."}else{msg="<code>nand(true, false)</code> does not return <code>true</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(true, false)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=nand(false,true);ok=result===true;if(ok){msg="<code>nand(false, true)</code> returns <code>true</code>."}else{msg="<code>nand(false, true)</code> does not return <code>true</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(false, true)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=nand(false,false);ok=result===true;if(ok){msg="<code>nand(false, false)</code> returns <code>true</code>."}else{msg="<code>nand(false, false)</code> does not return <code>true</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(false, false)</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'equals',title:'Strict equality',lesson:'Two values can be checked for strict equality. The result of such a comparison is either <code>true</code>, the two values are equal, '+'or <code>false</code>, the two values are not equal. The operator for strict equality is&nbsp;<code>===</code>.'+'<pre><code>'+'var language = "JavaScript";<br>'+'var x = 10;<br>'+'var c1 = language === "Java";<br>'+'var c2 = x === 10;<br>'+'var c3 = x === "10";</code></pre>'+'The first comparison results in <code>false</code>, because <code>language</code> does not have the value <code>"Java"</code>. So <code>c1</code> is <code>false</code>. '+'The second comparison results in <code>true</code>, because the value of <code>x</code> equals <code>10</code>. So <code>c2</code> is <code>true</code>. '+'In the case of strict equality, it is also important that the two compared values have the same data type. '+'<code>c3</code> is <code>false</code>, because different data types are compared here. '+'On the left side of the comparison is a number, on the right side a string.',task:'Write a function <code>equals</code> that checks two values for strict equality. <code>equals(1, 1)</code> should return '+'<code>true</code> and <code>equals(1, 2)</code> should return <code>false</code>.',beforeTests:function(){if(typeof equals!=='undefined'){equals=undefined}},tests:[function(){var ok=typeof equals==='function';var msg;if(ok){msg='<code>equals</code> is a function.'}else{msg='<code>equals</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=equals.length===2;var msg;if(ok){msg='<code>equals</code> has 2 parameters.'}else{msg='<code>equals</code> has not 2, but '+equals.length+' parameters.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=equals(1,1);ok=result===true;if(ok){msg='<code>equals(1, 1)</code> returns <code>true</code>.'}else{msg='<code>equals(1, 1)</code> does not return <code>true</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals(1, 1)</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=equals(1,'1');ok=result===false;if(ok){msg='<code>equals(1, "1")</code> returns <code>false</code>.'}else{msg='<code>equals(1, "1")</code> does not return <code>false</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals(1, "1")</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'equals2',title:'Three identical values',lesson:'The following task can be solved by an interaction of strict equality and a Boolean operator.',task:'Write a function <code>equals</code> that checks 3 values for strict equality. The function should only return <code>true</code> if all 3 values are equal. '+'<code>equals(1, 1, 1)</code> should return <code>true</code> and <code>equals(1, 2, 1)</code> should return <code>false</code>.',beforeTests:function(){if(typeof equals!=='undefined'){equals=undefined}},tests:[function(){var ok=typeof equals==='function';var msg;if(ok){msg='<code>equals</code> is a function.'}else{msg='<code>equals</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=equals.length===3;var msg;if(ok){msg='<code>equals</code> has 3 parameters.'}else{msg='<code>equals</code> has not 3, but '+equals.length+' parameters.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=equals(1,1,1);ok=result===true;if(ok){msg='<code>equals(1, 1, 1)</code> returns <code>true</code>.'}else{msg='<code>equals(1, 1, 1)</code> does not return <code>true</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals(1, 1, 1)</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=equals(1,1,'1');ok=result===false;if(ok){msg='<code>equals(1, 1, "1")</code> returns <code>false</code>.'}else{msg='<code>equals(1, 1, "1")</code> does not return <code>false</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals(1, 1, "1")</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=equals(1,'1',1);ok=result===false;if(ok){msg='<code>equals(1, "1", 1)</code> returns <code>false</code>.'}else{msg='<code>equals(1, "1", 1)</code> does not return <code>false</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals(1, "1", 1)</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=equals('1',1,1);ok=result===false;if(ok){msg='<code>equals("1", 1, 1)</code> returns <code>false</code>.'}else{msg='<code>equals("1", 1, 1)</code> does not return <code>false</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals("1", 1, 1)</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"for",title:"for loop",lesson:"Loops can execute code blocks several times. JavaScript knows different kinds of loops. The simplest one is the <code>for</code> loop.\n\n<pre><code>var sum = 0;\nfor (var i = 1; i < 3; i++) {\n  sum = sum + i;\n}</code></pre>\n\nThe <code>for</code> loop consists of three control expressions and the loop code.\nThe three control expressions follow the <code>for</code> keyword in parentheses.\nThey are separated by semicolons. The first expression is the start expression. It is executed once at the beginning of the loop.\nThe so-called loop variable is normally initialized here. The second expression is the loop condition.\nIt is evaluated to <code>true</code> or <code>false</code> before each loop iteration. If this expression evaluates to <code>true</code>,\nthe loop code is executed. If this expression evaluates to <code>false</code>, the loop is terminated and the program execution continues after the loop.\nThe third expression, called the final expression, is executed after each loop iteration. The loop variable is normally increased here.\nThen a new loop iteration is started with a new evaluation of the loop condition.\nThe loop code follows the three control expressions in brackets.\nIn our example <code>sum</code> has the value <code>0</code> initially. In the start expression <code>i</code> is initialized with <code>1</code>.\nThe loop condition <code>1 < 3</code> is fulfilled, so the loop code is executed.\n<code>sum</code> receives the value <code>0 + 1</code>, i. e. <code>1</code>.\nNow in the final expression <code>i</code> is increased by <code>1</code>. (<code>i++</code> is identical to <code>i = i + 1</code>).\n<code>i</code> thus receives the value <code>2</code>. The second loop starts with the evaluation of the loop condition.\nThis condition (<code>2 < 3</code>) is still fulfilled.\nThe loop code is executed again and <code>sum</code> is now given the value <code>1 + 2</code>, that is <code>3</code>.\nIn the final expression <code>i</code> is increased again and gets the value <code>3</code>.\nThe loop condition <code>3 < 3</code> is no longer fulfilled. The loop is terminated and the program execution continues after the loop.\nOur code example has added all natural numbers smaller than 3.",task:"Write a function <code>addTo</code> that accepts a number as a parameter and adds all natural numbers smaller than the parameter.\nThe result is to be returned. <code>addTo(4)</code> should return <code>6</code>.",beforeTests:function(){addTo=undefined},tests:[function(){return jshero.testutil.assert_isFunction("addTo")},function(){return jshero.testutil.assert_functionHasNumOfParameter("addTo",1)},function(){return jshero.testutil.assert_functionReturns("addTo(2)",1)},function(){return jshero.testutil.assert_functionReturns("addTo(3)",3)},function(){return jshero.testutil.assert_functionReturns("addTo(4)",6)}]});
jshero.koans.add({id:'for2',title:'Loops and arrays',lesson:'<code>for</code> loops are handy for traversing arrays.\nIn the following example, the elements of an array are added together:\n\n<pre><code>var sum = 0;\nfor (var i = 0; i < myArray.length; i++) {\n  sum = sum + myArray[i];\n}</code></pre>',task:'Write a function <code>mean</code> that accepts an array filled with numbers\nand returns the arithmetic mean of those numbers. <code>mean([1, 2, 3])</code> should return <code>(1+2+3)/3</code> = <code>2</code>.',beforeTests:function(){if(typeof mean!=='undefined'){mean=undefined}},tests:[function(){return jshero.testutil.assert_isFunction('mean')},function(){return jshero.testutil.assert_functionHasNumOfParameter('mean',1)},function(){return jshero.testutil.assert_functionReturns('mean([0])',0)},function(){return jshero.testutil.assert_functionReturns('mean([1, 2])',1.5)},function(){return jshero.testutil.assert_functionReturns('mean([1, 2, 3])',2)},function(){return jshero.testutil.assert_functionReturns('mean([-2, -4, 17, 34])',11.25)}]});
jshero.koans.add({id:"function",title:"Functions",lesson:"A function is a block of statements that can be executed as often as you like. "+"A function can have parameters and can return a value. "+"Functions are defined by the keyword <code>function</code>, followed by the parameters enclosed in parentheses, followed by the instructions enclosed in curly brackets. "+"Use the keyword <code>return</code> to return a value. At the same time <code>return</code> terminates the function. "+"Functions can be assigned to a variable. With "+"<pre><code>var color = function() {<br>  return \"red\";<br>};</code></pre> we define a function "+"that returns the value <code>\"red\"</code>. The function has no parameters (the parentheses are empty) and contains only the return statement. "+"The function is assigned to the variable <code>color</code>. The function is called via this variable:"+"<pre><code>var result = color();</code></pre>"+"Now the function is executed. Its return is assigned to the variable <code>result</code>. <code>result</code> therefore has the value <code>\"red\"</code>.",task:"Declare a variable <code>hello</code>. Assign a function to it, that returns <code>\"Hello world!\"</code>.",beforeTests:function(){if(typeof hello!=="undefined"){hello=undefined}},tests:[function(){return jshero.testutil.assert_isFunction("hello")},function(){return jshero.testutil.assert_functionReturns("hello()","Hello world!")}]});
jshero.koans.add({id:"function2",title:"Multiple functions",lesson:"Now we define more then one function.\n\n  Repetition: A function with name <code>color</code> returning the value\n  <code>\"red\"</code> is defined as followed:\n\n<pre><code>var color = function() {\n  return \"red\";\n};</code></pre>\n\n  ",task:"Define two functions. The first function <code>a</code> should return\n  <code>\"Hello a!\"</code> and the second function <code>b</code> should return\n  <code>\"Hello b!\"</code>.\n  ",beforeTests:function(){a=undefined;b=undefined},tests:[function(){return jshero.testutil.assert_isFunction("a")},function(){return jshero.testutil.assert_isFunction("b")},function(){return jshero.testutil.assert_functionReturns("a()","Hello a!")},function(){return jshero.testutil.assert_functionReturns("b()","Hello b!")}]});
jshero.koans.add({id:"functioncall",title:"Function calls",lesson:"The difference between the definition and the call of a function is important.\n  The following definition of a function\n\n<pre><code>var f = function() {\n  return \"hello\";\n};</code></pre>\n\n  says what the function will do: Return \"hello\", if called. The function will not be executed, but only provided.\n  Only with its call\n\n<pre><code>var x = f();</code></pre>\n\n  the function is executed. Every instruction in the function block is executed in order.\n  The result of the function in the example above will be assigned to the variable <code>x</code>.\n  To define a function use the keyword <code>function</code>.\n  If the function is assigned to a variable, the function is called via this variable.\n  Functions are defined once so that they can be used multiple times at different program points by calling them.",task:"1. Define a function <code>greet</code> returning the value <code>\"Haydo!\"</code>.\n  <br/>\n    2. Declare a variable <code>salutation</code>. Call the function <code>greet</code> and assign the result of the call to the variable <code>salutation</code>.",beforeTests:function(){greet=undefined;salutation=undefined},tests:[function(){return jshero.testutil.assert_isFunction("greet")},function(){return jshero.testutil.assert_functionReturns("greet()","Haydo!")},function(){return jshero.testutil.assert_variableDefined(salutation,"salutation")},function(){return jshero.testutil.assert_variableHasValue(salutation,"salutation","Haydo!")}]});
jshero.koans.add({id:"further",title:"To be continued ...",lesson:"JavaScript Hero will be continued.",task:"Further exercises will follow.",beforeTests:function(){},tests:[]});
jshero.koans.add({id:'greaterthan',title:'Compare numbers',lesson:'Numbers can be compared with the well-known mathematical symbols.\nIn the following examples, all expressions return the value <code>true</code>.\n<pre><code>var v1 = 5 > 4;\nvar v2 = 5 >= 5;\nvar v3 = 5 < 6;\nvar v4 = 5 <= 5;</code></pre>',task:'Write a function <code>isThreeDigit</code> that checks if a number is greater than or equal to 100 and less than 1000.\n  <code>isThreeDigit(500)</code> should return <code>true</code>. The call <code>isThreeDigit(50)</code> should return <code>false</code>.',beforeTests:function(){isThreeDigit=undefined},tests:[function(){return jshero.testutil.assert_isFunction('isThreeDigit')},function(){return jshero.testutil.assert_functionHasNumOfParameter('isThreeDigit',1)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(100)',true)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(999)',true)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(99)',false)},function(){return jshero.testutil.assert_functionReturns('isThreeDigit(1000)',false)}]});
jshero.koans.add({id:'if',title:'if',lesson:'Often code should only be executed if a certain condition is true. '+'To do this, use the <code>if</code> statement.'+'<pre><code>'+'var win = 0;<br>'+'if (dice === 6) {<br>'+'  win = 100;<br>'+'}</code></pre>'+'This statement consists of the keyword <code>if</code> followed by parentheses. The parentheses contain an expression - the condition - '+'that is evaluated to <code>true</code> or <code>false</code>. If the condition results in <code>true</code>, all statements in the block delimited by the curly brackets will be executed. '+'If the condition results in <code>false</code>, the block bounded by the curly brackets will be skipped. '+'In our example, if <code>dice</code> has the value <code>6</code>, then <code>win</code> is set to <code>100</code>. '+'If <code>dice</code> does not have the value <code>6</code>, then <code>win</code> remains at <code>0</code>.',task:'Write a function <code>equals</code> that checks two values for strict equality. If the two values are equal, the string <code>"EQUAL"</code> should be returned. '+'If they are unequal, you should get <code>"UNEQUAL"</code>. The call <code>equals(1, 1)</code> should return <code>"EQUAL"</code>, the call <code>equals(1, 2)</code> '+'should return <code>"UNEQUAL"</code>.',beforeTests:function(){if(typeof equals!=='undefined'){equals=undefined}},tests:[function(){var ok=typeof equals==='function';var msg;if(ok){msg='<code>equals</code> is a function.'}else{msg='<code>equals</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=equals.length===2;var msg;if(ok){msg='<code>equals</code> has 2 parameters.'}else{msg='<code>equals</code> has not 2 parameters, but '+equals.length+'.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=equals(1,1);ok=result==='EQUAL';if(ok){msg='<code>equals(1, 1)</code> returns <code>"EQUAL"</code>.'}else{msg='<code>equals(1, 1)</code> does not return <code>"EQUAL"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals(1, 1)</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=equals(1,'1');ok=result==='UNEQUAL';if(ok){msg='<code>equals(1, "1")</code> returns <code>"UNEQUAL"</code>.'}else{msg='<code>equals(1, "1")</code> does not return <code>"UNEQUAL"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>equals(1, "1")</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"math",title:"Math",lesson:"Many mathematical functions are grouped together in the <code>Math</code> object. "+"For example, <code>Math.sqrt(x)</code> returns the square root "+"and <code>Math.pow(x, y)</code> calculates x to the power of y."+"<pre><code>var y1 = Math.sqrt(9);<br>var y2 = Math.pow(10, 3);</code></pre>"+"<code>y1</code> has the value <code>3</code> and <code>y2</code> has the value <code>1000</code> (10&sup3; = 10 * 10 * 10 = 1000). ",task:"Write a function <code>hypotenuse</code> that calculates the length of the hypotenuse of a right triangle."+"The length of the two legs is passed to the function. Tip: In a right triangle the Pythagorean theorem is valid. "+"If a and b are the lengths of the two legs and c is the length of the hypotenuse, the following is true: a&sup2; + b&sup2; = c&sup2;. "+"Since 3&sup2; + 4&sup2; = 5&sup2; applies, <code>hypotenuse(3,4)</code> should return <code>5</code>.",beforeTests:function(){if(typeof hypotenuse!=="undefined"){hypotenuse=undefined}},tests:[function(){var ok=typeof hypotenuse==="function";var msg;if(ok){msg="<code>hypotenuse</code> is a function."}else{msg="<code>hypotenuse</code> is not a function."}return{ok:ok,msg:msg}},function(){var ok=hypotenuse.length===2;var msg;if(ok){msg="<code>hypotenuse</code> has 2 parameters."}else{msg="<code>hypotenuse</code> has not 2, but "+hypotenuse.length+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=hypotenuse(3,4);ok=result===5;if(ok){msg="<code>hypotenuse(3, 4)</code> returns <code>5</code>."}else{msg="<code>hypotenuse(3, 4)</code> does not return <code>5</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>hypotenuse(3, 4)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=hypotenuse(5,12);ok=result===13;if(ok){msg="<code>hypotenuse(5, 12)</code> returns <code>13</code>."}else{msg="<code>hypotenuse(5, 12)</code> does not return <code>13</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>hypotenuse(5, 12)</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"mean",title:"Parentheses",lesson:"Just as in mathematics, the order of operations rules are valid in JavaScript. Multiplication and division are performed before addition and subtraction. "+"With parentheses you can specify the order of operations."+"<pre><code>var x1 = 3 + 4 * 2;<br>var x2 = (3 + 4) * 2;</code></pre>"+"<code>x1</code> is <code>11</code> and <code>x2</code> is <code>14</code>.",task:"Write a function <code>mean</code> that takes 2 numbers and returns their mean value. "+"<code>mean(1, 2)</code> should return <code>1.5</code>.",beforeTests:function(){if(typeof mean!=="undefined"){mean=undefined}},tests:[function(){var ok=typeof mean==="function";var msg;if(ok){msg="<code>mean</code> is a function."}else{msg="<code>mean</code> is not a funktion."}return{ok:ok,msg:msg}},function(){var ok=mean.length===2;var msg;if(ok){msg="<code>mean</code> has 2 parameters."}else{msg="<code>mean</code> has not 2, but "+mean.length+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=mean(1,2);ok=result===1.5;if(ok){msg="<code>mean(1, 2)</code> returns <code>1.5</code>."}else{msg="<code>mean(1, 2)</code> does not return <code>1.5</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>mean(1, 2)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=mean(0,0);ok=result===0;if(ok){msg="<code>mean(0, 0)</code> returns <code>0</code>."}else{msg="<code>mean(0, 0)</code> does not return <code>0</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>mean(0, 0)</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"modulo",title:"Modulo",lesson:"Another arithmetic operator is modulo. It calculates the remainder of a division and is represented by <code>%</code>."+"<pre><code>var x = 7 % 2;<br>"+"var y = 20 % 3;</code></pre>"+"7 divided by 2 is 3 with remainder 1. <code>x</code> is <code>1</code>.<br>"+"20 divided by 3 is 6 with remainder 2. <code>y</code> is <code>2</code>.",task:"Write a function <code>firstDigit</code> that takes a natural number and returns the first digit of that number. "+"<code>firstDigit(2674)</code> should return <code>4</code>.",beforeTests:function(){if(typeof einer!=="undefined"){einer=undefined}},tests:[function(){var ok=typeof firstDigit==="function";var msg;if(ok){msg="<code>firstDigit</code> is a function."}else{msg="<code>firstDigit</code> is not a function."}return{ok:ok,msg:msg}},function(){var ok=firstDigit.length===1;var msg;if(ok){msg="<code>firstDigit</code> has 1 parameter."}else{msg="<code>firstDigit</code> has not 1, but "+firstDigit.length+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=firstDigit(0);ok=result===0;if(ok){msg="<code>firstDigit(0)</code> returns <code>0</code>."}else{msg="<code>firstDigit(0)</code> does not return <code>0</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>firstDigit(0)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=firstDigit(217);ok=result===7;if(ok){msg="<code>firstDigit(217)</code> returns <code>7</code>."}else{msg="<code>firstDigit(217)</code> does not return <code>7</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>firstDigit(217)</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"number",title:"Numbers",lesson:"Numbers are represented by simple numerals. They can have a decimal point and a minus sign."+"<pre><code>var x1 = 1;<br>var x2 = 1.0;<br>var x3 = 3.14;<br>var x4 = -1;</code></pre>"+"<code>1</code> and <code>1.0</code> are the same number. "+"You can calculate with numbers. The four basic arithmetics adding, subtracting, multiplying and dividing are represented by "+"<code> + - * </code> and <code>/</code>."+"<pre><code>var x1 = 6;<br>var x2 = 2;<br>var x3 = x1 + x2;<br>var x4 = x1 - x2;<br>var x5 = x1 * x2;<br>var x6 = x1 / x2;</code></pre>"+"The variables <code>x3</code> to <code>x6</code> thus have the values <code>8</code>, <code>4</code>, <code>12</code> and <code>3</code>.",task:"Write a function <code>add</code> that takes two numbers and returns their sum. "+"<code>add(1,&nbsp;2)</code> should return <code>3</code>.",beforeTests:function(){if(typeof add!=="undefined"){add=undefined}},tests:[function(){var ok=typeof add==="function";var msg;if(ok){msg="<code>add</code> is a function."}else{msg="<code>add</code> is not a function."}return{ok:ok,msg:msg}},function(){var ok=add.length===2;var msg;if(ok){msg="<code>add</code> has 2 parameters."}else{msg="<code>add</code> has not 2, but "+add.length+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=add(0,0);ok=result===0;if(ok){msg="<code>add(0, 0)</code> returns <code>0</code>."}else{msg="<code>add(0, 0)</code> does not return <code>0</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>add(0, 0)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=add(2,3);ok=result===5;if(ok){msg="<code>add(2, 3)</code> returns <code>5</code>."}else{msg="<code>add(2, 3)</code> does not return <code>5</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>add(2, 3)</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"parameter",title:"Parameters",lesson:"Now we get to know functions with parameters. With <pre><code>var give = function(input) {<br>  return input;<br>};</code></pre>"+"we define a function that simply returns the parameter <code>input</code>. "+"Parameters are variables. With"+"<pre><code>var result = give(\"apple\");</code></pre>"+"we call the function and pass it the argument <code>\"apple\"</code>. The function will be executed. "+"The argument <code>\"apple\"</code> will be assigned to the parameter <code>input</code>. <code>input</code> gets the value <code>\"apple\"</code>. "+"The variable <code>input</code> is returned in the single code line of the function. "+"This return is assigned to the variable <code>result</code>. Finally, <code>result</code> has the value <code>\"apple\"</code>. ",task:"Write a function <code>echo</code> that also returns the passed parameter.",beforeTests:function(){if(typeof echo!=="undefined"){echo=undefined}},tests:[function(){return jshero.testutil.assert_isFunction("echo")},function(){return jshero.testutil.assert_functionHasNumOfParameter("echo",1)},function(){return jshero.testutil.assert_functionReturns("echo(\"Hello world!\")","Hello world!")},function(){return jshero.testutil.assert_functionReturns("echo(\"rose\")","rose")}]});
jshero.koans.add({id:"pi",title:"Math.PI",lesson:"Besides functions <code>Math</code> offers some mathematical constants. "+"<code>Math.PI</code> gives &#960; (roughly 3.14) and <code>Math.E</code> gives Euler's number e (roughly 2.71).",task:"Write a function <code>area</code> that calculates the area of a circle. "+"The function is given the radius of the circle. <code>area(1)</code> should return <code>&#960;</code> and <code>area(2)</code> should return <code>4 * &#960;</code>.",beforeTests:function(){if(typeof area!=="undefined"){area=undefined}},tests:[function(){var ok=typeof area==="function";var msg;if(ok){msg="<code>area</code> is a funktion."}else{msg="<code>area</code> is not a funktion."}return{ok:ok,msg:msg}},function(){var ok=area.length===1;var msg;if(ok){msg="<code>area</code> has 1 parameter."}else{msg="<code>area</code> has not 1, but "+area.length+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=area(1);ok=result===Math.PI;if(ok){msg="<code>area(1)</code> returns <code>"+Math.PI+"</code>."}else{msg="<code>area(1)</code> does not return <code>"+Math.PI+"</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>area(1)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=area(2);ok=result===Math.PI*4;if(ok){msg="<code>area(2)</code> returns <code>"+Math.PI*4+"</code>."}else{msg="<code>area(2)</code> does not return <code>"+Math.PI*4+"</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>area(2)</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"round",title:"Rounding",lesson:"If you want to round a number, you can use the\n<code>Math.round()</code>, <code>Math.floor()</code> and <code>Math.ceil()</code> functions.\n\n<pre><code>var a = Math.round(5.49);\nvar b = Math.round(4.5);\nvar c = Math.floor(5.99);\nvar d = Math.ceil(4.01);</code></pre>\n\n<code>Math.round()</code> rounds a number to the nearest integer,\n<code>Math.floor()</code> rounds a number downwards to the nearest integer and\n<code>Math.ceil()</code> rounds a number upwards to the nearest integer.\nTherefore, the variables <code>a</code> to <code>d</code> all get the value <code>5</code>.",task:"Write a function <code>round100</code> that rounds a number to the nearest hundred.\n<code>round100(1749)</code> should return <code>1700</code> and <code>round100(856.12)</code> should return <code>900</code>.",beforeTests:function(){if(typeof round100!=="undefined"){round100=undefined}},tests:[function(){return jshero.testutil.assert_isFunction("round100")},function(){return jshero.testutil.assert_functionHasNumOfParameter("round100",1)},function(){return jshero.testutil.assert_functionReturns("round100(49.999)",0)},function(){return jshero.testutil.assert_functionReturns("round100(650)",700)}]});
jshero.koans.add({id:"string",title:"Strings",lesson:"We have seen that a variable is a container for a value. A value can be a text like <code>\"Hello world!\"</code>. "+"Values have a type. The type of <code>\"Hello world!\"</code> is string. "+"Strings are always written in single or double quotes. <code>\"Hello world!\"</code> is the same string as <code>'Hello world!'</code>.<br>"+"You can work with strings. For example, they can be concatenated. This is done with the <code>+</code> sign. "+"<code>\"Java\" + \"Script\"</code> results in the string <code>\"JavaScript\"</code>.<br>"+"The following function appends <code>\" is great!\"</code> to the passed parameter and returns the result:"+"<pre><code>var praise = function(name) {<br>  return name + \" is great!\";<br>};</code></pre>"+"<code>praise(\"JavaScript\")</code> will return <code>\"JavaScript is great!\"</code>.",task:"Write a function <code>greet</code> having one parameter and that returns <code>\"Hello &lt;parameter&gt;!\"</code>. "+"<code>greet(\"Ada\")</code> should return <code>\"Hello Ada!\"</code> and <code>greet(\"Tayo\")</code> should return <code>\"Hello Tayo!\"</code>.",beforeTests:function(){if(typeof greet!=="undefined"){greet=undefined}},tests:[function(){var ok=typeof greet==="function";var msg;if(ok){msg="<code>greet</code> is a function."}else{msg="<code>greet</code> is not a function."}return{msg:msg,ok:ok}},function(){var ok=greet.length===1;var msg;if(ok){msg="<code>greet</code> has 1 parameter."}else{msg="<code>greet</code> has not 1, but "+greet.length+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=greet("Ada");if(result==="Hello Ada!"){ok=true;msg="<code>greet(\"Ada\")</code> returns <code>\"Hello Ada!\"</code>."}else{ok=false;msg="<code>greet(\"Ada\")</code> does not return <code>\"Hello Ada!\"</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>greet(\"Ada\")</code>.";e=exc}return{msg:msg,ok:ok,e:e}},function(){var ok,msg,e;try{var result=greet("Tayo");if(result==="Hello Tayo!"){ok=true;msg="<code>greet(\"Tayo\")</code> returns <code>\"Hello Tayo!\"</code>."}else{ok=false;msg="<code>greet(\"Tayo\")</code> does not return <code>\"Hello Tayo!\"</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>greet(\"Tayo\")</code>.";e=exc}return{msg:msg,ok:ok,e:e}}]});
jshero.koans.add({id:'stringcharat',title:'String: charAt()',lesson:'To get a character from a string at a specified index, use the <code>charAt(index)</code> method: '+'<pre><code>var char0 = "Frantz".charAt(0);<br>var char1 = "Frantz".charAt(1);<br>var char9 = "Frantz".charAt(9);</code></pre>'+'The first character has the index 0. So <code>char0</code> has the value <code>"F"</code> and <code>char1</code> has the value <code>"r"</code>. '+'If the index is larger than the index of the last character, the empty string is returned. So <code>char9</code> has the value <code>""</code>.',task:'Write a function <code>shortcut</code> that takes two strings and returns the initial letters of theses strings. '+'<code>shortcut("Amnesty", "International")</code> should return <code>"AI"</code>.',beforeTests:function(){if(typeof shortcut!=='undefined'){shortcut=undefined}},tests:[function(){var ok=typeof shortcut==='function';var msg;if(ok){msg='<code>shortcut</code> is a function.'}else{msg='<code>shortcut</code> is not a function.'}return{ok:ok,msg:msg}},function(){var ok=shortcut.length===2;var msg;if(ok){msg='<code>shortcut</code> has 2 parameters.'}else{msg='<code>shortcut</code> has not 2, but '+shortcut.length+' parameters.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=shortcut('Amnesty','International');ok=result==='AI';if(ok){msg='<code>shortcut("Amnesty", "International")</code> returns <code>"AI"</code>.'}else{msg='<code>shortcut("Amnesty", "International")</code> does not return <code>"AI"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){e=exc;ok=false;msg='Error when calling <code>shortcut("Amnesty", "International")</code>.'}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=shortcut('Java','Script');ok=result==='JS';if(ok){msg='<code>shortcut("Java", "Script")</code> returns <code>"JS"</code>.'}else{msg='<code>shortcut("Java", "Script")</code> does not return <code>"JS"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){e=exc;ok=false;msg='Error when calling <code>shortcut("Java", "Script")</code>.'}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'stringindexof',title:'String: indexOf()',lesson:'To determine the first occurrence of a string within another string, use the <code>indexOf</code> method:\n\n<pre><code>var n1 = "White Rabbit".indexOf("Rabbit");\nvar n2 = "White Rabbit".indexOf("Coney");\nvar n3 = "White Rabbit".indexOf("RABBIT");</code></pre>\n\n<code>n1</code> is <code>6</code>, because <code>"Rabbit"</code> occurs in <code>"White Rabbit"</code> at the 6th place.\nAs usual, counting starts at 0. <code>indexOf</code> returns <code>-1</code> if the search string does not occur in the calling string.\nThus <code>n2</code> is <code>-1</code>. The <code>indexOf()</code> method is case sensitive. So <code>n3</code> is also <code>-1</code>.',task:'Write a function <code>indexOfIgnoreCase</code>, that accepts two strings\nand determines the first occurrence of the second string in the first string. The function should be case insensitive.\n<code>indexOfIgnoreCase("Rabbit","bit")</code> and <code>indexOfIgnoreCase("Rabbit","BIT")</code> should return <code>2</code>.',beforeTests:function(){if(typeof indexOfIgnoreCase!=='undefined'){indexOfIgnoreCase=undefined}},tests:[function(){return jshero.testutil.assert_isFunction('indexOfIgnoreCase')},function(){return jshero.testutil.assert_functionHasNumOfParameter('indexOfIgnoreCase',2)},function(){return jshero.testutil.assert_functionReturns('indexOfIgnoreCase("White Rabbit", "White")',0)},function(){return jshero.testutil.assert_functionReturns('indexOfIgnoreCase("White Rabbit", "RABBIT")',6)},function(){return jshero.testutil.assert_functionReturns('indexOfIgnoreCase("White Rabbit", "Coney")',-1)}]});
jshero.koans.add({id:'stringindexof2',title:'String: indexOf() with from index',lesson:'The <code>indexOf</code> method allows you to specify the position\nfrom which the search should start. This is done with a second parameter.\n\n<pre><code>var n1 = "White Rabbit".indexOf("it", 1);\nvar n2 = "White Rabbit".indexOf("it", 3);</code></pre>\n\nThe first <code>"it"</code> in <code>"White Rabbit"</code> has the index <code>2</code>.\nStarting our search at position <code>1</code> it will be found. <code>n1</code> is <code>2</code>.\nThe second <code>"it"</code> in <code>"White Rabbit"</code> has the index <code>10</code>.\nStarting our search at position <code>3</code> it will be found. <code>n2</code> is <code>10</code>.',task:'Write a function <code>secondIndexOf</code>, that accepts two strings\nand determines the second occurrence of the second string in the first string.\nIf the search string does not occur twice, <code>-1</code> should be returned.\n<code>secondIndexOf("White Rabbit", "it")</code> should return <code>10</code>.',beforeTests:function(){if(typeof secondIndexOf!=='undefined'){secondIndexOf=undefined}},tests:[function(){return jshero.testutil.assert_isFunction('secondIndexOf')},function(){return jshero.testutil.assert_functionHasNumOfParameter('secondIndexOf',2)},function(){return jshero.testutil.assert_functionReturns('secondIndexOf("White Rabbit", "it")',10)},function(){return jshero.testutil.assert_functionReturns('secondIndexOf("White Rabbit", "bit")',-1)},function(){return jshero.testutil.assert_functionReturns('secondIndexOf("Oh dear! Oh dear!", "Oh")',9)}]});
jshero.koans.add({id:"stringlength",title:"String: length",lesson:"Strings have the <code>length</code> property. This property represents the number of characters in a string. "+"To do this, you must append <code>.length</code> to the string or to the variable that contains the string:"+"<pre><code>var charNumber = \"Ai\".length;</code/></pre>"+"<code>\"Ai\"</code> has 2 characters. So <code>charNumber</code> has the value <code>2</code>."+"<pre><code>var name = \"Weiwei\";<br>charNumber = name.length;</code/></pre>"+"<code>\"Weiwei\"</code> has 6 characters. <code>charNumber</code> now has the value <code>6</code>."+"<pre><code>charNumber = \"\".length;</code/></pre>"+"The empty string has no characters. The value of <code>charNumber</code> is <code>0</code>.",task:"Write a function <code>length</code> that takes a string and returns the number of characters of the string. "+"<code>length(\"sun\")</code> should return <code>3</code>.",beforeTests:function(){if(typeof length!=="undefined"){length=undefined}},tests:[function(){var ok=typeof length==="function";var msg;if(ok){msg="<code>length</code> is a function."}else{msg="<code>length</code> is not a function."}return{ok:ok,msg:msg}},function(){var result=length.length;var ok=result===1;var msg;if(ok){msg="<code>length</code> has 1 parameter."}else{msg="<code>length</code> has not 1, but "+result+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=length("Hello world!");ok=result===12;if(ok){msg="<code>length(\"Hello world!\")</code> returns <code>12</code>."}else{msg="<code>length(\"Hello world!\")</code> does not return <code>12</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>length(\"Hello world!\")</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=length("");ok=result===0;if(ok){msg="<code>length(\"\")</code> returns <code>0</code>."}else{msg="<code>length(\"\")</code> does not return <code>0</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>length(\"\")</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:'stringsubstr',title:'String: substr()',lesson:'The <code>substr</code> method extracts a substring from a string:\n\n<pre><code>var see = "see and stop".substr(0, 3);\nvar and = "see and stop".substr(4, 3);\nvar stop = "see and stop".substr(8);</code></pre>\n\nThe first parameter specifies the position at which to start extracting.\nThe second parameter specifies the number of characters to extract.\nIf the second parameter is not set, all the characters from start position to the end of the string are extracted.',task:'Write a function <code>firstWord</code>, that accepts a string and returns the first word in that string.\n  The first word are all characters up to the first space.\n<code>firstWord("see and stop")</code> should return <code>"see"</code>.',beforeTests:function(){if(typeof firstWord!=='undefined'){firstWord=undefined}},tests:[function(){return jshero.testutil.assert_isFunction('firstWord')},function(){return jshero.testutil.assert_functionHasNumOfParameter('firstWord',1)},function(){return jshero.testutil.assert_functionReturns('firstWord("see and stop")','see')},function(){return jshero.testutil.assert_functionReturns('firstWord("speak again")','speak')}]});
jshero.koans.add({id:'stringupper',title:'String: toUpperCase()',lesson:'In addition to the <code>length</code> property, strings have methods. These are functions that are applied to the string. '+'Like the <code>length</code> property, these methods are appended with a point to the string or to a variable that contains a string. '+'The arguments enclosed in parentheses follow. '+'Two of these string methods are the parameterless methods <code>toUpperCase</code> and <code>toLowerCase</code>. '+'They return the string in uppercase or lowercase.'+'<pre><code>var town = "Mthatha";<br>var output = town.toUpperCase();</code/></pre>'+'<code>output</code> has the value <code>"MTHATHA"</code>. <code>town</code> still has the value <code>"Mthatha"</code>.'+'<pre><code>output = town.toLowerCase();</code/></pre>'+'Now <code>output</code> has the value <code>"mthatha"</code>.',task:'Write a function <code>toCase</code> that takes a string and returns that string in lowercase and uppercase with <code>-</code> as delimiter. '+'<code>toCase("Mthatha")</code> should return <code>"mthatha-MTHATHA"</code>.',beforeTests:function(){if(typeof toCase!=='undefined'){toCase=undefined}},tests:[function(){var ok=typeof toCase==='function';var msg;if(ok){msg='<code>toCase</code> is a function.'}else{msg='<code>toCase</code> is not a function.'}return{ok:ok,msg:msg}},function(){var result=toCase.length;var ok=result===1;var msg;if(ok){msg='<code>toCase</code> has 1 parameter.'}else{msg='<code>toCase</code> has not 1, but '+result+' parameters.'}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=toCase('Mthatha');ok=result==='mthatha-MTHATHA';if(ok){msg='<code>toCase("Mthatha")</code> returns <code>"mthatha-MTHATHA"</code>.'}else{msg='<code>toCase("Mthatha")</code> does not return <code>"mthatha-MTHATHA"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>toCase("Mthatha")</code>.';e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=toCase('Johannesburg');ok=result==='johannesburg-JOHANNESBURG';if(ok){msg='<code>toCase("Johannesburg")</code> returns <code>"johannesburg-JOHANNESBURG"</code>.'}else{msg='<code>toCase("Johannesburg")</code> does not return <code>"johannesburg-JOHANNESBURG"</code>, but <code>'+JSON.stringify(result)+'</code>.'}}catch(exc){ok=false;msg='Error when calling <code>toCase("Johannesburg")</code>.';e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"trim",title:"String: trim()",lesson:"The <code>trim</code> method removes whitespaces from both ends of a string."+"<pre><code>"+"var input = \" Rosa Parks \";<br>"+"var name = input.trim();"+"</code></pre>"+"<code>name</code> contains the string <code>\"Rosa Parks\"</code>. <code>input</code> still contains the string <code>\" Rosa Parks \"</code>.",task:"Write a function <code>firstChar</code>, which returns the first character that is not a space when a string is passed. "+"<code>firstChar(\" Rosa Parks \")</code> should return <code>\"R\"</code>.",beforeTests:function(){if(typeof firstChar!=="undefined"){firstChar=undefined}},tests:[function(){var ok=typeof firstChar==="function";var msg;if(ok){msg="<code>firstChar</code> is a function."}else{msg="<code>firstChar</code> is not a function."}return{ok:ok,msg:msg}},function(){var result=firstChar.length;var ok=result===1;var msg;if(ok){msg="<code>firstChar</code> has 1 parameter"}else{msg="<code>firstChar</code> does not have 1, but "+result+" parameters."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=firstChar(" Rosa");ok=result==="R";if(ok){msg="<code>firstChar(\" Rosa\")</code> returns <code>\"R\"</code>."}else{msg="<code>firstChar(\" Rosa\")</code> does not return <code>\"R\"</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>firstChar(\" Rosa\")</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=firstChar(" Parks");ok=result==="P";if(ok){msg="<code>firstChar(\" Parks\")</code> returns <code>\"P\"</code>."}else{msg="<code>firstChar(\" Parks\")</code> does not return <code>\"P\"</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>firstChar(\" Parks\")</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
jshero.koans.add({id:"var",title:"Variables",lesson:"JavaScript programs consist of a series of statements. Each statement performs an elementary operation. "+"By executing many instructions you can finally solve complex tasks. "+"Each statement is written in a line and closed with a semicolon.<br><br>"+"An elementary statement is the declaration and initialization of a variable. A variable is a container for a value. The statement "+"<pre><code>var city = \"Porbandar\";</code></pre>"+"declares a variable with the name <code>city</code> and initializes it with the value <code>\"Porbandar\"</code>. "+"The variable is declared with the keyword <code>var</code>. "+"Use the equals sign, the assignment operator, to assign a value to the variable. "+"Note: JavaScript is case-sensitive. <code>city</code> and <code>City</code> are two different variables.",task:"Declare a variable <code>firstname</code> and initialize it with the value <code>\"Lata\"</ code>.",beforeTests:function(){if(typeof firstname!=="undefined"){firstname=undefined}},tests:[function(){return jshero.testutil.assert_variableDefined(firstname,"firstname")},function(){return jshero.testutil.assert_variableHasValue(firstname,"firstname","Lata")}]});
jshero.koans.add({id:"var2",title:"Several variables",lesson:"Several variables are declared and initialized in 2 program lines:"+"<pre><code>var city = \"Lubumbashi\";<br>"+"var country = \"Congo\";</code></pre>",task:"Declare a variable <code>flower</code> and assign it the value <code>\"rose\"</code>. "+"Declare a second variable <code>tree</code> and assign it the value <code>\"maple\"</code>.",beforeTests:function(){if(typeof flower!=="undefined"){flower=undefined}if(typeof tree!=="undefined"){tree=undefined}},tests:[function(){return jshero.testutil.assert_variableDefined(flower,"flower")},function(){return jshero.testutil.assert_variableHasValue(flower,"flower","rose")},function(){return jshero.testutil.assert_variableDefined(tree,"tree")},function(){return jshero.testutil.assert_variableHasValue(tree,"tree","maple")}]});
jshero.koans.add({id:"xor",title:"XOR",lesson:"In the last task you have coded a so-called NAND (Not AND) gate. "+"NAND gates are a standard component in digital electronics. Any Boolean function can be implemented by using a combination of NAND gates. "+"Here you will get to know another important gate, the XOR (eXclusive OR) gate.",task:"Write a function <code>xor</code> that takes two Boolean values. If both values are different, the result should be <code>true</code>. "+"If both values are the same, the result should be <code>false</code>. The calls <code>xor(true, false)</code> and "+"<code>xor(false, true)</code> should return <code>true</code>. The calls <code>xor(true, true)</code> and <code>xor(false, false)</code> should return <code>false</code>.",beforeTests:function(){if(typeof nand!=="undefined"){nand=undefined}},tests:[function(){var ok=typeof xor==="function";var msg;if(ok){msg="<code>xor</code> is a function."}else{msg="<code>xor</code> is not a function."}return{ok:ok,msg:msg}},function(){var ok=xor.length===2;var msg;if(ok){msg="<code>xor</code> has 2 parameters."}else{msg="<code>xor</code> has not 2 parameters, but "+xor.length+"."}return{ok:ok,msg:msg}},function(){var ok,msg,e;try{var result=xor(true,true);ok=result===false;if(ok){msg="<code>xor(true, true)</code> returns <code>false</code>."}else{msg="<code>xor(true, true)</code> does not return <code>false</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(true, true)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=xor(false,false);ok=result===false;if(ok){msg="<code>xor(false, false)</code> returns <code>false</code>."}else{msg="<code>xor(false, false)</code> does not return <code>false</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(true, true)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=xor(true,false);ok=result===true;if(ok){msg="<code>xor(true, false)</code> returns <code>true</code>."}else{msg="<code>xor(true, false)</code> does not return <code>true</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(true, true)</code>.";e=exc}return{ok:ok,msg:msg,e:e}},function(){var ok,msg,e;try{var result=xor(false,true);ok=result===true;if(ok){msg="<code>xor(false, true)</code> returns <code>true</code>."}else{msg="<code>xor(false, true)</code> does not return <code>true</code>, but <code>"+JSON.stringify(result)+"</code>."}}catch(exc){ok=false;msg="Error when calling <code>nand(true, true)</code>.";e=exc}return{ok:ok,msg:msg,e:e}}]});
/* This puts the koans in the desired order */jshero.koans.initReorder(['var','var2','function','function2','functioncall','parameter','string','stringlength','stringupper','stringcharat','trim','stringindexof','stringindexof2','stringsubstr','number','modulo','mean','math','pi','round','bool','xor','equals','equals2','greaterthan','if','array','array2','array3','arraylength','arraysort','for','for2','further']);
