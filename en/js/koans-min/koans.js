jshero.koans.add({id:"var",title:"Variables",lesson:'JavaScript programs consist of a series of statements. Each statement performs an elementary operation. By executing many instructions you can finally solve complex tasks. Each statement is written in a line and closed with a semicolon.\x3cbr\x3e\x3cbr\x3eAn elementary statement is the declaration and initialization of a variable. A variable is a container for a value. The statement \x3cpre\x3e\x3ccode\x3evar city \x3d "Porbandar";\x3c/code\x3e\x3c/pre\x3edeclares a variable with the name \x3ccode\x3ecity\x3c/code\x3e and initializes it with the value \x3ccode\x3e"Porbandar"\x3c/code\x3e. The variable is declared with the keyword \x3ccode\x3evar\x3c/code\x3e. Use the equals sign, the assignment operator, to assign a value to the variable. Note: JavaScript is case-sensitive. \x3ccode\x3ecity\x3c/code\x3e and \x3ccode\x3eCity\x3c/code\x3e are two different variables.',
task:'Declare a variable \x3ccode\x3efirstname\x3c/code\x3e and initialize it with the value \x3ccode\x3e"Lata"\x3c/ code\x3e.',beforeTests:function(){"undefined"!==typeof firstname&&(firstname=void 0)},tests:[function(){var a="undefined"!==typeof firstname;return{ok:a,msg:a?"\x3ccode\x3efirstname\x3c/code\x3e has a value.":"\x3ccode\x3efirstname\x3c/code\x3e has no value."}},function(){var a="Lata"===firstname,b;b=a?'\x3ccode\x3efirstname\x3c/code\x3e has the value "Lata".':'\x3ccode\x3efirstname\x3c/code\x3e does not have the value \x3ccode\x3e"Lata"\x3c/code\x3e, but the value \x3ccode\x3e'+
JSON.stringify(firstname)+"\x3c/code\x3e.";return{ok:a,msg:b}}]});
jshero.koans.add({id:"var2",title:"Several variables",lesson:'Several variables are declared and initialized in 2 program lines:\x3cpre\x3e\x3ccode\x3evar city \x3d "Lubumbashi";\x3cbr\x3evar country \x3d "Congo";\x3c/code\x3e\x3c/pre\x3e',task:'Declare a variable \x3ccode\x3eflower\x3c/code\x3e and assign it the value \x3ccode\x3e"rose"\x3c/code\x3e. Declare a second variable \x3ccode\x3etree\x3c/code\x3e and assign it the value \x3ccode\x3e"maple"\x3c/code\x3e.',beforeTests:function(){"undefined"!==
typeof flower&&(flower=void 0);"undefined"!==typeof tree&&(tree=void 0)},tests:[function(){var a="undefined"!==typeof flower;return{ok:a,msg:a?"\x3ccode\x3eflower\x3c/code\x3e has a value.":"\x3ccode\x3eflower\x3c/code\x3e has no value."}},function(){var a="rose"===flower,b;b=a?'\x3ccode\x3eflower\x3c/code\x3e has the value \x3ccode\x3e"rose"\x3c/code\x3e.':"\x3ccode\x3eflower\x3c/code\x3e does not have the value \x3ccode\x3erose\x3c/code\x3e, but the value \x3ccode\x3e"+JSON.stringify(flower)+"\x3c/code\x3e.";
return{ok:a,msg:b}},function(){var a="undefined"!==typeof tree;return{ok:a,msg:a?"\x3ccode\x3etree\x3c/code\x3e has a value.":"\x3ccode\x3etree\x3c/code\x3e has no value."}},function(){var a="maple"===tree,b;b=a?'\x3ccode\x3etree\x3c/code\x3e has the value \x3ccode\x3e"maple"\x3c/code\x3e.':'\x3ccode\x3etree\x3c/code\x3e does not have the value \x3ccode\x3e"maple"\x3c/code\x3e, but the value \x3ccode\x3e'+JSON.stringify(tree)+"\x3c/code\x3e.";return{ok:a,msg:b}}]});
jshero.koans.add({id:"function",title:"Functions",lesson:'A function is a block of statements that can be executed as often as you like. A function can have parameters and can return a value. Functions are defined by the keyword \x3ccode\x3efunction\x3c/code\x3e, followed by the parameters enclosed in parentheses, followed by the instructions enclosed in curly brackets. Use the keyword \x3ccode\x3ereturn\x3c/code\x3e to return a value. At the same time \x3ccode\x3ereturn\x3c/code\x3e terminates the function. Functions can be assigned to a variable. With \x3cpre\x3e\x3ccode\x3evar color \x3d function() {\x3cbr\x3e  return "red";\x3cbr\x3e};\x3c/code\x3e\x3c/pre\x3e we define a function that returns the value \x3ccode\x3e"red"\x3c/code\x3e. The function has no parameters (the parentheses are empty) and contains only the return statement. The function is assigned to the variable \x3ccode\x3ecolor\x3c/code\x3e. The function is called via this variable:\x3cpre\x3e\x3ccode\x3evar result \x3d color();\x3c/code\x3e\x3c/pre\x3eNow the function is executed. Its return is assigned to the variable \x3ccode\x3eresult\x3c/code\x3e. \x3ccode\x3eresult\x3c/code\x3e therefore has the value \x3ccode\x3e"red"\x3c/code\x3e.',
task:'Declare a variable \x3ccode\x3ehello\x3c/code\x3e. Assign a function to it, that returns \x3ccode\x3e"Hello world!"\x3c/code\x3e.',beforeTests:function(){"undefined"!==typeof hello&&(hello=void 0)},tests:[function(){var a="function"===typeof hello;return{ok:a,msg:a?"\x3ccode\x3ehello\x3c/code\x3e is a function.":"\x3ccode\x3ehello\x3c/code\x3e is not a function."}},function(){var a,b,d;try{var c=hello();b=(a="Hello world!"===c)?'\x3ccode\x3ehello()\x3c/code\x3e returns \x3ccode\x3e"Hello world!"\x3c/code\x3e.':
'\x3ccode\x3ehello()\x3c/code\x3e does not return \x3ccode\x3e"Hello world!"\x3c/code\x3e but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3ehello()\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"parameter",title:"Parameters",lesson:'Now we get to know functions with parameters. With \x3cpre\x3e\x3ccode\x3evar give \x3d function(input) {\x3cbr\x3e  return input;\x3cbr\x3e};\x3c/code\x3e\x3c/pre\x3ewe define a function that simply returns the parameter \x3ccode\x3einput\x3c/code\x3e. Parameters are variables. With\x3cpre\x3e\x3ccode\x3evar result \x3d give("apple");\x3c/code\x3e\x3c/pre\x3ewe call the function and pass it the argument \x3ccode\x3e"apple"\x3c/code\x3e. The function will be executed. The argument \x3ccode\x3e"apple"\x3c/code\x3e will be assigned to the parameter \x3ccode\x3einput\x3c/code\x3e. \x3ccode\x3einput\x3c/code\x3e gets the value \x3ccode\x3e"apple"\x3c/code\x3e. The variable \x3ccode\x3einput\x3c/code\x3e is returned in the single code line of the function. This return is assigned to the variable \x3ccode\x3eresult\x3c/code\x3e. Finally, \x3ccode\x3eresult\x3c/code\x3e has the value \x3ccode\x3e"apple"\x3c/code\x3e. ',task:"Write a function \x3ccode\x3eecho\x3c/code\x3e that also returns the passed parameter.",
beforeTests:function(){"undefined"!==typeof echo&&(echo=void 0)},tests:[function(){var a="function"===typeof echo;return{ok:a,msg:a?"\x3ccode\x3eecho\x3c/code\x3e is a function.":"\x3ccode\x3eecho\x3c/code\x3e is not a function."}},function(){var a=echo.length,b=1===a;return{ok:b,msg:b?"\x3ccode\x3eecho\x3c/code\x3e has 1 parameter.":"\x3ccode\x3eecho\x3c/code\x3e has not 1, but "+a+" parameters."}},function(){var a,b,d;try{var c=echo("Hello World!");b=(a="Hello World!"===c)?'\x3ccode\x3eecho("Hello World!")\x3c/code\x3e returns \x3ccode\x3e"Hello World!"\x3c/code\x3e.':
'\x3ccode\x3eecho("Hello World!")\x3c/code\x3e does not return \x3ccode\x3e"Hello World!"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3eecho("Hello World!")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=echo("rose");b=(a="rose"===c)?'\x3ccode\x3eecho("rose")\x3c/code\x3e returns \x3ccode\x3e"rose"\x3c/code\x3e.':'\x3ccode\x3eecho("rose")\x3c/code\x3e does not return \x3ccode\x3e"rose"\x3c/code\x3e, but \x3ccode\x3e'+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3eecho("rose")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"string",title:"Strings",lesson:'We have seen that a variable is a container for a value. A value can be a text like \x3ccode\x3e"Hello world!"\x3c/code\x3e. Values have a type. The type of \x3ccode\x3e"Hello world!"\x3c/code\x3e is string. Strings are always written in single or double quotes. \x3ccode\x3e"Hello world!"\x3c/code\x3e is the same string as \x3ccode\x3e\'Hello world!\'\x3c/code\x3e.\x3cbr\x3eYou can work with strings. For example, they can be concatenated. This is done with the \x3ccode\x3e+\x3c/code\x3e sign. \x3ccode\x3e"Java" + "Script"\x3c/code\x3e results in the string \x3ccode\x3e"JavaScript"\x3c/code\x3e.\x3cbr\x3eThe following function appends \x3ccode\x3e" is great!"\x3c/code\x3e to the passed parameter and returns the result:\x3cpre\x3e\x3ccode\x3evar praise \x3d function(name) {\x3cbr\x3e  return name + " is great!";\x3cbr\x3e};\x3c/code\x3e\x3c/pre\x3e\x3ccode\x3epraise("JavaScript")\x3c/code\x3e will return \x3ccode\x3e"JavaScript is great!"\x3c/code\x3e.',task:'Write a function \x3ccode\x3egreet\x3c/code\x3e having one parameter and that returns \x3ccode\x3e"Hello \x26lt;parameter\x26gt;!"\x3c/code\x3e. \x3ccode\x3egreet("Ada")\x3c/code\x3e should return \x3ccode\x3e"Hello Ada!"\x3c/code\x3e and \x3ccode\x3egreet("Tayo")\x3c/code\x3e should return \x3ccode\x3e"Hello Tayo!"\x3c/code\x3e.',
beforeTests:function(){"undefined"!==typeof greet&&(greet=void 0)},tests:[function(){var a="function"===typeof greet;return{msg:a?"\x3ccode\x3egreet\x3c/code\x3e is a function.":"\x3ccode\x3egreet\x3c/code\x3e is not a function.",ok:a}},function(){var a=1===greet.length;return{ok:a,msg:a?"\x3ccode\x3egreet\x3c/code\x3e has 1 parameter.":"\x3ccode\x3egreet\x3c/code\x3e has not 1, but "+greet.length+" parameters."}},function(){var a,b,d;try{var c=greet("Ada");"Hello Ada!"===c?(a=!0,b='\x3ccode\x3egreet("Ada")\x3c/code\x3e returns \x3ccode\x3e"Hello Ada!"\x3c/code\x3e.'):
(a=!1,b='\x3ccode\x3egreet("Ada")\x3c/code\x3e does not return \x3ccode\x3e"Hello Ada!"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e.")}catch(e){a=!1,b='Error when calling \x3ccode\x3egreet("Ada")\x3c/code\x3e.',d=e}return{msg:b,ok:a,e:d}},function(){var a,b,d;try{var c=greet("Tayo");"Hello Tayo!"===c?(a=!0,b='\x3ccode\x3egreet("Tayo")\x3c/code\x3e returns \x3ccode\x3e"Hello Tayo!"\x3c/code\x3e.'):(a=!1,b='\x3ccode\x3egreet("Tayo")\x3c/code\x3e does not return \x3ccode\x3e"Hello Tayo!"\x3c/code\x3e, but \x3ccode\x3e'+
JSON.stringify(c)+"\x3c/code\x3e.")}catch(e){a=!1,b='Error when calling \x3ccode\x3egreet("Tayo")\x3c/code\x3e.',d=e}return{msg:b,ok:a,e:d}}]});
jshero.koans.add({id:"stringlength",title:"String: length",lesson:'Strings have the \x3ccode\x3elength\x3c/code\x3e property. This property represents the number of characters in a string. To do this, you must append \x3ccode\x3e.length\x3c/code\x3e to the string or to the variable that contains the string:\x3cpre\x3e\x3ccode\x3evar charNumber \x3d "Ai".length;\x3c/code/\x3e\x3c/pre\x3e\x3ccode\x3e"Ai"\x3c/code\x3e has 2 characters. So \x3ccode\x3echarNumber\x3c/code\x3e has the value \x3ccode\x3e2\x3c/code\x3e.\x3cpre\x3e\x3ccode\x3evar name \x3d "Weiwei";\x3cbr\x3echarNumber \x3d name.length;\x3c/code/\x3e\x3c/pre\x3e\x3ccode\x3e"Weiwei"\x3c/code\x3e has 6 characters. \x3ccode\x3echarNumber\x3c/code\x3e now has the value \x3ccode\x3e6\x3c/code\x3e.\x3cpre\x3e\x3ccode\x3echarNumber \x3d "".length;\x3c/code/\x3e\x3c/pre\x3eThe empty string has no characters. The value of \x3ccode\x3echarNumber\x3c/code\x3e is \x3ccode\x3e0\x3c/code\x3e.',task:'Write a function \x3ccode\x3elength\x3c/code\x3e that takes a string and returns the number of characters of the string. \x3ccode\x3elength("sun")\x3c/code\x3e should return \x3ccode\x3e3\x3c/code\x3e.',
beforeTests:function(){"undefined"!==typeof length&&(length=void 0)},tests:[function(){var a="function"===typeof length;return{ok:a,msg:a?"\x3ccode\x3elength\x3c/code\x3e is a function.":"\x3ccode\x3elength\x3c/code\x3e is not a function."}},function(){var a=length.length,b=1===a;return{ok:b,msg:b?"\x3ccode\x3elength\x3c/code\x3e has 1 parameter.":"\x3ccode\x3elength\x3c/code\x3e has not 1, but "+a+" parameters."}},function(){var a,b,d;try{var c=length("Hello world!");b=(a=12===c)?'\x3ccode\x3elength("Hello world!")\x3c/code\x3e returns \x3ccode\x3e12\x3c/code\x3e.':
'\x3ccode\x3elength("Hello world!")\x3c/code\x3e does not return \x3ccode\x3e12\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3elength("Hello world!")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=length("");b=(a=0===c)?'\x3ccode\x3elength("")\x3c/code\x3e returns \x3ccode\x3e0\x3c/code\x3e.':'\x3ccode\x3elength("")\x3c/code\x3e does not return \x3ccode\x3e0\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+
"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3elength("")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"stringupper",title:"String: toUpperCase()",lesson:'In addition to the \x3ccode\x3elength\x3c/code\x3e property, strings have methods. These are functions that are applied to the string. Like the \x3ccode\x3elength\x3c/code\x3e property, these methods are appended with a point to the string or to a variable that contains a string. The arguments enclosed in parentheses follow. Two of these string methods are the parameterless methods \x3ccode\x3etoUpperCase\x3c/code\x3e and \x3ccode\x3etoLowerCase\x3c/code\x3e. They return the string in uppercase or lowercase.\x3cpre\x3e\x3ccode\x3evar town \x3d "Mthatha";\x3cbr\x3evar output \x3d town.toUpperCase();\x3c/code/\x3e\x3c/pre\x3e\x3ccode\x3eoutput\x3c/code\x3e has the value \x3ccode\x3e"MTHATHA"\x3c/code\x3e. \x3ccode\x3etown\x3c/code\x3e still has the value \x3ccode\x3e"Mthatha"\x3c/code\x3e.\x3cpre\x3e\x3ccode\x3eoutput \x3d town.toLowerCase();\x3c/code/\x3e\x3c/pre\x3eNow \x3ccode\x3eoutput\x3c/code\x3e has the value \x3ccode\x3e"mthatha"\x3c/code\x3e.',task:'Write a function \x3ccode\x3etoCase\x3c/code\x3e that takes a string and returns that string in lowercase and uppercase with \x3ccode\x3e-\x3c/code\x3e as delimiter. \x3ccode\x3etoCase("Mthatha")\x3c/code\x3e should return \x3ccode\x3e"mthatha-MTHATHA"\x3c/code\x3e.',
beforeTests:function(){"undefined"!==typeof toCase&&(toCase=void 0)},tests:[function(){var a="function"===typeof toCase;return{ok:a,msg:a?"\x3ccode\x3etoCase\x3c/code\x3e is a function.":"\x3ccode\x3etoCase\x3c/code\x3e is not a function."}},function(){var a=toCase.length,b=1===a;return{ok:b,msg:b?"\x3ccode\x3etoCase\x3c/code\x3e has 1 parameter.":"\x3ccode\x3etoCase\x3c/code\x3e has not 1, but "+a+" parameters."}},function(){var a,b,d;try{var c=toCase("Mthatha");b=(a="mthatha-MTHATHA"===c)?'\x3ccode\x3etoCase("Mthatha")\x3c/code\x3e returns \x3ccode\x3e"mthatha-MTHATHA"\x3c/code\x3e.':
'\x3ccode\x3etoCase("Mthatha")\x3c/code\x3e does not return \x3ccode\x3e"mthatha-MTHATHA"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3etoCase("Mthatha")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=toCase("Johannesburg");b=(a="johannesburg-JOHANNESBURG"===c)?'\x3ccode\x3etoCase("Johannesburg")\x3c/code\x3e returns \x3ccode\x3e"johannesburg-JOHANNESBURG"\x3c/code\x3e.':'\x3ccode\x3etoCase("Johannesburg")\x3c/code\x3e does not return \x3ccode\x3e"johannesburg-JOHANNESBURG"\x3c/code\x3e, but \x3ccode\x3e'+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3etoCase("Johannesburg")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"stringcharat",title:"String: charAt()",lesson:'To get a character from a string at a specified index, use the \x3ccode\x3echarAt(index)\x3c/code\x3e method: \x3cpre\x3e\x3ccode\x3evar char0 \x3d "Frantz".charAt(0);\x3cbr\x3evar char1 \x3d "Frantz".charAt(1);\x3cbr\x3evar char9 \x3d "Frantz".charAt(9);\x3c/code\x3e\x3c/pre\x3eThe first character has the index 0. So \x3ccode\x3echar0\x3c/code\x3e has the value \x3ccode\x3e"F"\x3c/code\x3e and \x3ccode\x3echar1\x3c/code\x3e has the value \x3ccode\x3e"r"\x3c/code\x3e. If the index is larger than the index of the last character, the empty string is returned. So \x3ccode\x3echar9\x3c/code\x3e has the value \x3ccode\x3e""\x3c/code\x3e.',task:'Write a function \x3ccode\x3eshortcut\x3c/code\x3e that takes two strings and returns the initial letters of theses strings. \x3ccode\x3eshortcut("Amnesty", "International")\x3c/code\x3e should return \x3ccode\x3e"AI"\x3c/code\x3e.',
beforeTests:function(){"undefined"!==typeof shortcut&&(shortcut=void 0)},tests:[function(){var a="function"===typeof shortcut;return{ok:a,msg:a?"\x3ccode\x3eshortcut\x3c/code\x3e is a function.":"\x3ccode\x3eshortcut\x3c/code\x3e is not a function."}},function(){var a=2===shortcut.length;return{ok:a,msg:a?"\x3ccode\x3eshortcut\x3c/code\x3e has 2 parameters.":"\x3ccode\x3eshortcut\x3c/code\x3e has not 2, but "+shortcut.length+" parameters."}},function(){var a,b,d;try{var c=shortcut("Amnesty","International");
b=(a="AI"===c)?'\x3ccode\x3eshortcut("Amnesty", "International")\x3c/code\x3e returns \x3ccode\x3e"AI"\x3c/code\x3e.':'\x3ccode\x3eshortcut("Amnesty", "International")\x3c/code\x3e does not return \x3ccode\x3e"AI"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){d=e,a=!1,b='Error when calling \x3ccode\x3eshortcut("Amnesty", "International")\x3c/code\x3e.'}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=shortcut("Java","Script");b=(a="JS"===c)?'\x3ccode\x3eshortcut("Java", "Script")\x3c/code\x3e returns \x3ccode\x3e"JS"\x3c/code\x3e.':
'\x3ccode\x3eshortcut("Java", "Script")\x3c/code\x3e does not return \x3ccode\x3e"JS"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){d=e,a=!1,b='Error when calling \x3ccode\x3eshortcut("Java", "Script")\x3c/code\x3e.'}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"trim",title:"String: trim()",lesson:'The \x3ccode\x3etrim\x3c/code\x3e method removes whitespaces from both ends of a string.\x3cpre\x3e\x3ccode\x3evar input \x3d " Rosa Parks ";\x3cbr\x3evar name \x3d input.trim();\x3c/code\x3e\x3c/pre\x3e\x3ccode\x3ename\x3c/code\x3e contains the string \x3ccode\x3e"Rosa Parks"\x3c/code\x3e. \x3ccode\x3einput\x3c/code\x3e still contains the string \x3ccode\x3e" Rosa Parks "\x3c/code\x3e.',task:'Write a function \x3ccode\x3efirstChar\x3c/code\x3e, which returns the first character that is not a space when a string is passed. \x3ccode\x3efirstChar(" Rosa Parks ")\x3c/code\x3e should return \x3ccode\x3e"R"\x3c/code\x3e.',
beforeTests:function(){"undefined"!==typeof firstChar&&(firstChar=void 0)},tests:[function(){var a="function"===typeof firstChar;return{ok:a,msg:a?"\x3ccode\x3efirstChar\x3c/code\x3e is a function.":"\x3ccode\x3efirstChar\x3c/code\x3e is not a function."}},function(){var a=firstChar.length,b=1===a;return{ok:b,msg:b?"\x3ccode\x3efirstChar\x3c/code\x3e has 1 parameter":"\x3ccode\x3efirstChar\x3c/code\x3e does not have 1, but "+a+" parameters."}},function(){var a,b,d;try{var c=firstChar(" Rosa");b=(a=
"R"===c)?'\x3ccode\x3efirstChar(" Rosa")\x3c/code\x3e returns \x3ccode\x3e"R"\x3c/code\x3e.':'\x3ccode\x3efirstChar(" Rosa")\x3c/code\x3e does not return \x3ccode\x3e"R"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3efirstChar(" Rosa")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=firstChar(" Parks");b=(a="P"===c)?'\x3ccode\x3efirstChar(" Parks")\x3c/code\x3e returns \x3ccode\x3e"P"\x3c/code\x3e.':'\x3ccode\x3efirstChar(" Parks")\x3c/code\x3e does not return \x3ccode\x3e"P"\x3c/code\x3e, but \x3ccode\x3e'+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3efirstChar(" Parks")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"number",title:"Numbers",lesson:"Numbers are represented by simple numerals. They can have a decimal point and a minus sign.\x3cpre\x3e\x3ccode\x3evar x1 \x3d 1;\x3cbr\x3evar x2 \x3d 1.0;\x3cbr\x3evar x3 \x3d 3.14;\x3cbr\x3evar x4 \x3d -1;\x3c/code\x3e\x3c/pre\x3e\x3ccode\x3e1\x3c/code\x3e and \x3ccode\x3e1.0\x3c/code\x3e are the same number. You can calculate with numbers. The four basic arithmetics adding, subtracting, multiplying and dividing are represented by \x3ccode\x3e + - * \x3c/code\x3e and \x3ccode\x3e/\x3c/code\x3e.\x3cpre\x3e\x3ccode\x3evar x1 \x3d 6;\x3cbr\x3evar x2 \x3d 2;\x3cbr\x3evar x3 \x3d x1 + x2;\x3cbr\x3evar x4 \x3d x1 - x2;\x3cbr\x3evar x5 \x3d x1 * x2;\x3cbr\x3evar x6 \x3d x1 / x2;\x3c/code\x3e\x3c/pre\x3eThe variables \x3ccode\x3ex3\x3c/code\x3e to \x3ccode\x3ex6\x3c/code\x3e thus have the values \x3ccode\x3e8\x3c/code\x3e, \x3ccode\x3e4\x3c/code\x3e, \x3ccode\x3e12\x3c/code\x3e and \x3ccode\x3e3\x3c/code\x3e.",task:"Write a function \x3ccode\x3eadd\x3c/code\x3e that takes two numbers and returns their sum. \x3ccode\x3eadd(1,\x26nbsp;2)\x3c/code\x3e should return \x3ccode\x3e3\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof add&&(add=void 0)},tests:[function(){var a="function"===typeof add;return{ok:a,msg:a?"\x3ccode\x3eadd\x3c/code\x3e is a function.":"\x3ccode\x3eadd\x3c/code\x3e is not a function."}},function(){var a=2===add.length;return{ok:a,msg:a?"\x3ccode\x3eadd\x3c/code\x3e has 2 parameters.":"\x3ccode\x3eadd\x3c/code\x3e has not 2, but "+add.length+" parameters."}},function(){var a,b,d;try{var c=add(0,0);b=(a=0===c)?"\x3ccode\x3eadd(0, 0)\x3c/code\x3e returns \x3ccode\x3e0\x3c/code\x3e.":
"\x3ccode\x3eadd(0, 0)\x3c/code\x3e does not return \x3ccode\x3e0\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3eadd(0, 0)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=add(2,3);b=(a=5===c)?"\x3ccode\x3eadd(2, 3)\x3c/code\x3e returns \x3ccode\x3e5\x3c/code\x3e.":"\x3ccode\x3eadd(2, 3)\x3c/code\x3e does not return \x3ccode\x3e5\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=
!1,b="Error when calling \x3ccode\x3eadd(2, 3)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"modulo",title:"Modulo",lesson:"Another arithmetic operator is modulo. It calculates the remainder of a division and is represented by \x3ccode\x3e%\x3c/code\x3e.\x3cpre\x3e\x3ccode\x3evar x \x3d 7 % 2;\x3cbr\x3evar y \x3d 20 % 3;\x3c/code\x3e\x3c/pre\x3e7 divided by 2 is 3 with remainder 1. \x3ccode\x3ex\x3c/code\x3e is \x3ccode\x3e1\x3c/code\x3e.\x3cbr\x3e20 divided by 3 is 6 with remainder 2. \x3ccode\x3ey\x3c/code\x3e is \x3ccode\x3e2\x3c/code\x3e.",task:"Write a function \x3ccode\x3efirstDigit\x3c/code\x3e that takes a natural number and returns the first digit of that number. \x3ccode\x3efirstDigit(2674)\x3c/code\x3e should return \x3ccode\x3e4\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof einer&&(einer=void 0)},tests:[function(){var a="function"===typeof firstDigit;return{ok:a,msg:a?"\x3ccode\x3efirstDigit\x3c/code\x3e is a function.":"\x3ccode\x3efirstDigit\x3c/code\x3e is not a function."}},function(){var a=1===firstDigit.length;return{ok:a,msg:a?"\x3ccode\x3efirstDigit\x3c/code\x3e has 1 parameter.":"\x3ccode\x3efirstDigit\x3c/code\x3e has not 1, but "+firstDigit.length+" parameters."}},function(){var a,b,d;try{var c=firstDigit(0);b=(a=
0===c)?"\x3ccode\x3efirstDigit(0)\x3c/code\x3e returns \x3ccode\x3e0\x3c/code\x3e.":"\x3ccode\x3efirstDigit(0)\x3c/code\x3e does not return \x3ccode\x3e0\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3efirstDigit(0)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=firstDigit(217);b=(a=7===c)?"\x3ccode\x3efirstDigit(217)\x3c/code\x3e returns \x3ccode\x3e7\x3c/code\x3e.":"\x3ccode\x3efirstDigit(217)\x3c/code\x3e does not return \x3ccode\x3e7\x3c/code\x3e, but \x3ccode\x3e"+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3efirstDigit(217)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"mean",title:"Parentheses",lesson:"Just as in mathematics, the order of operations rules are valid in JavaScript. Multiplication and division are performed before addition and subtraction. With parentheses you can specify the order of operations.\x3cpre\x3e\x3ccode\x3evar x1 \x3d 3 + 4 * 2;\x3cbr\x3evar x2 \x3d (3 + 4) * 2;\x3c/code\x3e\x3c/pre\x3e\x3ccode\x3ex1\x3c/code\x3e is \x3ccode\x3e11\x3c/code\x3e and \x3ccode\x3ex2\x3c/code\x3e is \x3ccode\x3e14\x3c/code\x3e.",task:"Write a function \x3ccode\x3emean\x3c/code\x3e that takes 2 numbers and returns their mean value. \x3ccode\x3emean(1, 2)\x3c/code\x3e should return \x3ccode\x3e1.5\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof mean&&(mean=void 0)},tests:[function(){var a="function"===typeof mean;return{ok:a,msg:a?"\x3ccode\x3emean\x3c/code\x3e is a function.":"\x3ccode\x3emean\x3c/code\x3e is not a funktion."}},function(){var a=2===mean.length;return{ok:a,msg:a?"\x3ccode\x3emean\x3c/code\x3e has 2 parameters.":"\x3ccode\x3emean\x3c/code\x3e has not 2, but "+mean.length+" parameters."}},function(){var a,b,d;try{var c=mean(1,2);b=(a=1.5===c)?"\x3ccode\x3emean(1, 2)\x3c/code\x3e returns \x3ccode\x3e1.5\x3c/code\x3e.":
"\x3ccode\x3emean(1, 2)\x3c/code\x3e does not return \x3ccode\x3e1.5\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3emean(1, 2)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=mean(0,0);b=(a=0===c)?"\x3ccode\x3emean(0, 0)\x3c/code\x3e returns \x3ccode\x3e0\x3c/code\x3e.":"\x3ccode\x3emean(0, 0)\x3c/code\x3e does not return \x3ccode\x3e0\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=
!1,b="Error when calling \x3ccode\x3emean(0, 0)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"math",title:"Math",lesson:"Many mathematical functions are grouped together in the \x3ccode\x3eMath\x3c/code\x3e object. For example, \x3ccode\x3eMath.sqrt(x)\x3c/code\x3e returns the square root and \x3ccode\x3eMath.pow(x, y)\x3c/code\x3e calculates x to the power of y.\x3cpre\x3e\x3ccode\x3evar y1 \x3d Math.sqrt(9);\x3cbr\x3evar y2 \x3d Math.pow(10, 3);\x3c/code\x3e\x3c/pre\x3e\x3ccode\x3ey1\x3c/code\x3e has the value \x3ccode\x3e3\x3c/code\x3e and \x3ccode\x3ey2\x3c/code\x3e has the value \x3ccode\x3e1000\x3c/code\x3e (10\x26sup3; \x3d 10 * 10 * 10 \x3d 1000). ",task:"Write a function \x3ccode\x3ehypotenuse\x3c/code\x3e that calculates the length of the hypotenuse of a right triangle.The length of the two legs is passed to the function. Tip: In a right triangle the Pythagorean theorem is valid. If a and b are the lengths of the two legs and c is the length of the hypotenuse, the following is true: a\x26sup2; + b\x26sup2; \x3d c\x26sup2;. Since 3\x26sup2; + 4\x26sup2; \x3d 5\x26sup2; applies, \x3ccode\x3ehypotenuse(3,4)\x3c/code\x3e should return \x3ccode\x3e5\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof hypotenuse&&(hypotenuse=void 0)},tests:[function(){var a="function"===typeof hypotenuse;return{ok:a,msg:a?"\x3ccode\x3ehypotenuse\x3c/code\x3e is a function.":"\x3ccode\x3ehypotenuse\x3c/code\x3e is not a function."}},function(){var a=2===hypotenuse.length;return{ok:a,msg:a?"\x3ccode\x3ehypotenuse\x3c/code\x3e has 2 parameters.":"\x3ccode\x3ehypotenuse\x3c/code\x3e has not 2, but "+hypotenuse.length+" parameters."}},function(){var a,b,d;try{var c=hypotenuse(3,
4);b=(a=5===c)?"\x3ccode\x3ehypotenuse(3, 4)\x3c/code\x3e returns \x3ccode\x3e5\x3c/code\x3e.":"\x3ccode\x3ehypotenuse(3, 4)\x3c/code\x3e does not return \x3ccode\x3e5\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3ehypotenuse(3, 4)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=hypotenuse(5,12);b=(a=13===c)?"\x3ccode\x3ehypotenuse(5, 12)\x3c/code\x3e returns \x3ccode\x3e13\x3c/code\x3e.":"\x3ccode\x3ehypotenuse(5, 12)\x3c/code\x3e does not return \x3ccode\x3e13\x3c/code\x3e, but \x3ccode\x3e"+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3ehypotenuse(5, 12)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"pi",title:"Math.PI",lesson:"Besides functions \x3ccode\x3eMath\x3c/code\x3e offers some mathematical constants. \x3ccode\x3eMath.PI\x3c/code\x3e gives \x26#960; (roughly 3.14) and \x3ccode\x3eMath.E\x3c/code\x3e gives Euler's number e (roughly 2.71).",task:"Write a function \x3ccode\x3earea\x3c/code\x3e that calculates the area of a circle. The function is given the radius of the circle. \x3ccode\x3earea(1)\x3c/code\x3e should return \x3ccode\x3e\x26#960;\x3c/code\x3e and \x3ccode\x3earea(2)\x3c/code\x3e should return \x3ccode\x3e4 * \x26#960;\x3c/code\x3e.",beforeTests:function(){"undefined"!==
typeof area&&(area=void 0)},tests:[function(){var a="function"===typeof area;return{ok:a,msg:a?"\x3ccode\x3earea\x3c/code\x3e is a funktion.":"\x3ccode\x3earea\x3c/code\x3e is not a funktion."}},function(){var a=1===area.length;return{ok:a,msg:a?"\x3ccode\x3earea\x3c/code\x3e has 1 parameter.":"\x3ccode\x3earea\x3c/code\x3e has not 1, but "+area.length+" parameters."}},function(){var a,b,d;try{var c=area(1);b=(a=c===Math.PI)?"\x3ccode\x3earea(1)\x3c/code\x3e returns \x3ccode\x3e"+Math.PI+"\x3c/code\x3e.":
"\x3ccode\x3earea(1)\x3c/code\x3e does not return \x3ccode\x3e"+Math.PI+"\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3earea(1)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=area(2);b=(a=c===4*Math.PI)?"\x3ccode\x3earea(2)\x3c/code\x3e returns \x3ccode\x3e"+4*Math.PI+"\x3c/code\x3e.":"\x3ccode\x3earea(2)\x3c/code\x3e does not return \x3ccode\x3e"+4*Math.PI+"\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+
"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3earea(2)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"bool",title:"Boolean",lesson:"Another important data type next to strings and numbers are Boolean values. They have only two values: \x3ccode\x3etrue\x3c/code\x3e and \x3ccode\x3efalse\x3c/code\x3e. You can calculate with Boolean values similar to numbers. JavaScript has three Boolean operators: \x3ccode\x3e\x26\x26\x3c/code\x3e (and), \x3ccode\x3e||\x3c/code\x3e (or) and \x3ccode\x3e!\x3c/code\x3e (not). \x3ccode\x3e\x26\x26\x3c/code\x3e links two Boolean values. If both values are \x3ccode\x3etrue\x3c/code\x3e, the result is \x3ccode\x3etrue\x3c/code\x3e. In all other cases it is \x3ccode\x3efalse\x3c/code\x3e. With \x3ccode\x3e||\x3c/code\x3e the result is \x3ccode\x3etrue\x3c/code\x3e, if at least one of the two input values is \x3ccode\x3etrue\x3c/code\x3e. If both input values are \x3ccode\x3efalse\x3c/code\x3e, the result is \x3ccode\x3efalse\x3c/code\x3e. \x3ccode\x3e!\x3c/code\x3e is applied to a single Boolean value and inverts this value: \x3ccode\x3e!true\x3c/code\x3e is \x3ccode\x3efalse\x3c/code\x3e and \x3ccode\x3e!false\x3c/code\x3e is \x3ccode\x3etrue\x3c/code\x3e.\x3cpre\x3e\x3ccode\x3evar x1 \x3d true \x26\x26 false;\x3cbr\x3evar x2 \x3d !x1;\x3cbr\x3evar x3 \x3d x1 || x2;\x3c/code\x3e\x3c/pre\x3e\x3ccode\x3ex1\x3c/code\x3e is \x3ccode\x3efalse\x3c/code\x3e,  \x3ccode\x3ex2\x3c/code\x3e is \x3ccode\x3etrue\x3c/code\x3e and \x3ccode\x3ex3\x3c/code\x3e is \x3ccode\x3etrue\x3c/code\x3e.",task:"Write a function \x3ccode\x3enand\x3c/code\x3e that takes two Boolean values. If both values are \x3ccode\x3etrue\x3c/code\x3e, the result should be \x3ccode\x3efalse\x3c/code\x3e. In the other cases the return should be \x3ccode\x3etrue\x3c/code\x3e. The call \x3ccode\x3enand(true, true)\x3c/code\x3e should return \x3ccode\x3efalse\x3c/code\x3e. The calls \x3ccode\x3enand(true, false)\x3c/code\x3e, \x3ccode\x3enand(false, true)\x3c/code\x3e and \x3ccode\x3enand(false, false)\x3c/code\x3e should return \x3ccode\x3etrue\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof nand&&(nand=void 0)},tests:[function(){var a="function"===typeof nand;return{ok:a,msg:a?"\x3ccode\x3enand\x3c/code\x3e is a function.":"\x3ccode\x3enand\x3c/code\x3e is not a function."}},function(){var a=2===nand.length;return{ok:a,msg:a?"\x3ccode\x3enand\x3c/code\x3e has 2 parameters.":"\x3ccode\x3enand\x3c/code\x3e has not 2, but "+nand.length+" parameters."}},function(){var a,b,d;try{var c=nand(!0,!0);b=(a=!1===c)?"\x3ccode\x3enand(true, true)\x3c/code\x3e returns \x3ccode\x3efalse\x3c/code\x3e.":
"\x3ccode\x3enand(true, true)\x3c/code\x3e does not return \x3ccode\x3efalse\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(true, true)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=nand(!0,!1);b=(a=!0===c)?"\x3ccode\x3enand(true, false)\x3c/code\x3e returns \x3ccode\x3etrue\x3c/code\x3e.":"\x3ccode\x3enand(true, false)\x3c/code\x3e does not return \x3ccode\x3etrue\x3c/code\x3e, but \x3ccode\x3e"+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(true, false)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=nand(!1,!0);b=(a=!0===c)?"\x3ccode\x3enand(false, true)\x3c/code\x3e returns \x3ccode\x3etrue\x3c/code\x3e.":"\x3ccode\x3enand(false, true)\x3c/code\x3e does not return \x3ccode\x3etrue\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(false, true)\x3c/code\x3e.",
d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=nand(!1,!1);b=(a=!0===c)?"\x3ccode\x3enand(false, false)\x3c/code\x3e returns \x3ccode\x3etrue\x3c/code\x3e.":"\x3ccode\x3enand(false, false)\x3c/code\x3e does not return \x3ccode\x3etrue\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(false, false)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"xor",title:"XOR",lesson:"In the last task you have coded a so-called NAND (Not AND) gate. NAND gates are a standard component in digital electronics. Any boolean function can be implemented by using a combination of NAND gates. Here you will get to know another important gate, the XOR (eXclusive OR) gate.",task:"Write a function \x3ccode\x3exor\x3c/code\x3e that takes two Boolean values. If both values are different, the result should be \x3ccode\x3etrue\x3c/code\x3e. If both values are the same, the result should be \x3ccode\x3efalse\x3c/code\x3e. The calls \x3ccode\x3exor(true, false)\x3c/code\x3e and \x3ccode\x3exor(false, true)\x3c/code\x3e should return \x3ccode\x3etrue\x3c/code\x3e. The calls \x3ccode\x3exor(true, true)\x3c/code\x3e and \x3ccode\x3exor(false, false)\x3c/code\x3e should return \x3ccode\x3efalse\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof nand&&(nand=void 0)},tests:[function(){var a="function"===typeof xor;return{ok:a,msg:a?"\x3ccode\x3exor\x3c/code\x3e is a function.":"\x3ccode\x3exor\x3c/code\x3e is not a function."}},function(){var a=2===xor.length;return{ok:a,msg:a?"\x3ccode\x3exor\x3c/code\x3e has 2 parameters.":"\x3ccode\x3exor\x3c/code\x3e has not 2 parameters, but "+xor.length+"."}},function(){var a,b,d;try{var c=xor(!0,!0);b=(a=!1===c)?"\x3ccode\x3exor(true, true)\x3c/code\x3e returns \x3ccode\x3efalse\x3c/code\x3e.":
"\x3ccode\x3exor(true, true)\x3c/code\x3e does not return \x3ccode\x3efalse\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(true, true)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=xor(!1,!1);b=(a=!1===c)?"\x3ccode\x3exor(false, false)\x3c/code\x3e returns \x3ccode\x3efalse\x3c/code\x3e.":"\x3ccode\x3exor(false, false)\x3c/code\x3e does not return \x3ccode\x3efalse\x3c/code\x3e, but \x3ccode\x3e"+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(true, true)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=xor(!0,!1);b=(a=!0===c)?"\x3ccode\x3exor(true, false)\x3c/code\x3e returns \x3ccode\x3etrue\x3c/code\x3e.":"\x3ccode\x3exor(true, false)\x3c/code\x3e does not return \x3ccode\x3etrue\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(true, true)\x3c/code\x3e.",
d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=xor(!1,!0);b=(a=!0===c)?"\x3ccode\x3exor(false, true)\x3c/code\x3e returns \x3ccode\x3etrue\x3c/code\x3e.":"\x3ccode\x3exor(false, true)\x3c/code\x3e does not return \x3ccode\x3etrue\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3enand(true, true)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"equals",title:"Strict equality",lesson:'Two values can be checked for strict equality. The result of such a comparison is either \x3ccode\x3etrue\x3c/code\x3e, the two values are equal, or \x3ccode\x3efalse\x3c/code\x3e, the two values are not equal. The operator for strict equality is\x26nbsp;\x3ccode\x3e\x3d\x3d\x3d\x3c/code\x3e.\x3cpre\x3e\x3ccode\x3evar language \x3d "JavaScript";\x3cbr\x3evar x \x3d 10;\x3cbr\x3evar c1 \x3d language \x3d\x3d\x3d "Java";\x3cbr\x3evar c2 \x3d x \x3d\x3d\x3d 10;\x3cbr\x3evar c3 \x3d x \x3d\x3d\x3d "10";\x3c/code\x3e\x3c/pre\x3eThe first comparison results in \x3ccode\x3efalse\x3c/code\x3e, because \x3ccode\x3elanguage\x3c/code\x3e does not have the value \x3ccode\x3e"Java"\x3c/code\x3e. So \x3ccode\x3ec1\x3c/code\x3e is \x3ccode\x3efalse\x3c/code\x3e. The second comparison results in \x3ccode\x3etrue\x3c/code\x3e, because the value of \x3ccode\x3ex\x3c/code\x3e equals \x3ccode\x3e10\x3c/code\x3e. So \x3ccode\x3ec2\x3c/code\x3e is \x3ccode\x3etrue\x3c/code\x3e. In the case of strict equality, it is also important that the two compared values have the same data type. \x3ccode\x3ec3\x3c/code\x3e is \x3ccode\x3efalse\x3c/code\x3e, because different data types are compared here. On the left side of the comparison is a number, on the right side a string.',task:"Write a function \x3ccode\x3eequals\x3c/code\x3e that checks two values for strict equality. \x3ccode\x3eequals(1, 1)\x3c/code\x3e should return \x3ccode\x3etrue\x3c/code\x3e and \x3ccode\x3eequals(1, 2)\x3c/code\x3e should return \x3ccode\x3efalse\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof equals&&(equals=void 0)},tests:[function(){var a="function"===typeof equals;return{ok:a,msg:a?"\x3ccode\x3eequals\x3c/code\x3e is a function.":"\x3ccode\x3eequals\x3c/code\x3e is not a function."}},function(){var a=2===equals.length;return{ok:a,msg:a?"\x3ccode\x3eequals\x3c/code\x3e has 2 parameters.":"\x3ccode\x3eequals\x3c/code\x3e has not 2, but "+equals.length+" parameters."}},function(){var a,b,d;try{var c=equals(1,1);b=(a=!0===c)?"\x3ccode\x3eequals(1, 1)\x3c/code\x3e returns \x3ccode\x3etrue\x3c/code\x3e.":
"\x3ccode\x3eequals(1, 1)\x3c/code\x3e does not return \x3ccode\x3etrue\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3eequals(1, 1)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=equals(1,"1");b=(a=!1===c)?'\x3ccode\x3eequals(1, "1")\x3c/code\x3e returns \x3ccode\x3efalse\x3c/code\x3e.':'\x3ccode\x3eequals(1, "1")\x3c/code\x3e does not return \x3ccode\x3efalse\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+
"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3eequals(1, "1")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"equals2",title:"Three identical values",lesson:"The following task should demonstrate the interaction of strict equality and Boolean operators.",task:"Write a function \x3ccode\x3eequals\x3c/code\x3e that checks 3 values for strict equality. The function should only return \x3ccode\x3etrue\x3c/code\x3e if all 3 values are equal. \x3ccode\x3eequals(1, 1, 1)\x3c/code\x3e should return \x3ccode\x3etrue\x3c/code\x3e and \x3ccode\x3eequals(1, 2, 1)\x3c/code\x3e should return \x3ccode\x3efalse\x3c/code\x3e.",beforeTests:function(){"undefined"!==
typeof equals&&(equals=void 0)},tests:[function(){var a="function"===typeof equals;return{ok:a,msg:a?"\x3ccode\x3eequals\x3c/code\x3e is a function.":"\x3ccode\x3eequals\x3c/code\x3e is not a function."}},function(){var a=3===equals.length;return{ok:a,msg:a?"\x3ccode\x3eequals\x3c/code\x3e has 3 parameters.":"\x3ccode\x3eequals\x3c/code\x3e has not 3, but "+equals.length+" parameters."}},function(){var a,b,d;try{var c=equals(1,1,1);b=(a=!0===c)?"\x3ccode\x3eequals(1, 1, 1)\x3c/code\x3e returns \x3ccode\x3etrue\x3c/code\x3e.":
"\x3ccode\x3eequals(1, 1, 1)\x3c/code\x3e does not return \x3ccode\x3etrue\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3eequals(1, 1, 1)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=equals(1,1,"1");b=(a=!1===c)?'\x3ccode\x3eequals(1, 1, "1")\x3c/code\x3e returns \x3ccode\x3efalse\x3c/code\x3e.':'\x3ccode\x3eequals(1, 1, "1")\x3c/code\x3e does not return \x3ccode\x3efalse\x3c/code\x3e, but \x3ccode\x3e'+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3eequals(1, 1, "1")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=equals(1,"1",1);b=(a=!1===c)?'\x3ccode\x3eequals(1, "1", 1)\x3c/code\x3e returns \x3ccode\x3efalse\x3c/code\x3e.':'\x3ccode\x3eequals(1, "1", 1)\x3c/code\x3e does not return \x3ccode\x3efalse\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3eequals(1, "1", 1)\x3c/code\x3e.',
d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=equals("1",1,1);b=(a=!1===c)?'\x3ccode\x3eequals("1", 1, 1)\x3c/code\x3e returns \x3ccode\x3efalse\x3c/code\x3e.':'\x3ccode\x3eequals("1", 1, 1)\x3c/code\x3e does not return \x3ccode\x3efalse\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3eequals("1", 1, 1)\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"if",title:"if",lesson:"Often code should only be executed if a certain condition is true. To do this, use the \x3ccode\x3eif\x3c/code\x3e statement.\x3cpre\x3e\x3ccode\x3evar win \x3d 0;\x3cbr\x3eif (dice \x3d\x3d\x3d 6) {\x3cbr\x3e  win \x3d 100;\x3cbr\x3e}\x3c/code\x3e\x3c/pre\x3eThis statement consists of the keyword \x3ccode\x3eif\x3c/code\x3e followed by parentheses. The parentheses contain an expression - the condition - that is evaluated to \x3ccode\x3etrue\x3c/code\x3e or \x3ccode\x3efalse\x3c/code\x3e. If the condition results in \x3ccode\x3etrue\x3c/code\x3e, all statements in the block delimited by the curly brackets will be executed. If the condition results in \x3ccode\x3efalse\x3c/code\x3e, the block bounded by the curly brackets will be skipped. In our example, if \x3ccode\x3edice\x3c/code\x3e has the value \x3ccode\x3e6\x3c/code\x3e, then \x3ccode\x3ewin\x3c/code\x3e is set to \x3ccode\x3e100\x3c/code\x3e. If \x3ccode\x3edice\x3c/code\x3e does not have the value \x3ccode\x3e6\x3c/code\x3e, then \x3ccode\x3ewin\x3c/code\x3e remains at \x3ccode\x3e0\x3c/code\x3e.",task:'Write a function \x3ccode\x3eequals\x3c/code\x3e that checks two values for strict equality. If the two values are equal, the string \x3ccode\x3e"EQUAL"\x3c/code\x3e should be returned. If they are unequal, you should get \x3ccode\x3e"UNEQUAL"\x3c/code\x3e. The call \x3ccode\x3eequals(1, 1)\x3c/code\x3e should return \x3ccode\x3e"EQUAL"\x3c/code\x3e, the call \x3ccode\x3eequals(1, 2)\x3c/code\x3e should return \x3ccode\x3e"UNEQUAL"\x3c/code\x3e.',
beforeTests:function(){"undefined"!==typeof equals&&(equals=void 0)},tests:[function(){var a="function"===typeof equals;return{ok:a,msg:a?"\x3ccode\x3eequals\x3c/code\x3e is a function.":"\x3ccode\x3eequals\x3c/code\x3e is not a function."}},function(){var a=2===equals.length;return{ok:a,msg:a?"\x3ccode\x3eequals\x3c/code\x3e has 2 parameter.":"\x3ccode\x3eequals\x3c/code\x3e has not 2, but "+equals.length+" parameters."}},function(){var a,b,d;try{var c=equals(1,1);b=(a="EQUAL"===c)?'\x3ccode\x3eequals(1, 1)\x3c/code\x3e returns \x3ccode\x3e"EQUAL"\x3c/code\x3e.':
'\x3ccode\x3eequals(1, 1)\x3c/code\x3e does not return \x3ccode\x3e"EQUAL"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3eequals(1, 1)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=equals(1,"1");b=(a="UNEQUAL"===c)?'\x3ccode\x3eequals(1, "1")\x3c/code\x3e returns \x3ccode\x3e"UNEQUAL"\x3c/code\x3e.':'\x3ccode\x3eequals(1, "1")\x3c/code\x3e does not return \x3ccode\x3e"UNEQUAL"\x3c/code\x3e, but \x3ccode\x3e'+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3eequals(1, "1")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"array",title:"Creating arrays",lesson:'Arrays are objects for storing multiple values. Arrays are preferably created with square brackets.\x3cpre\x3e\x3ccode\x3evar languages \x3d ["C", "C++", "Java"];\x3cbr\x3evar primes \x3d [2, 3, 5, 7, 11];\x3cbr\x3evar emptyArray \x3d [];\x3cbr\x3evar a \x3d "Douglas";\x3cbr\x3evar b \x3d 12;\x3cbr\x3evar c \x3d true;\x3cbr\x3evar someValues \x3d [a, b, c];\x3c/code\x3e\x3c/pre\x3e',task:"Write a function \x3ccode\x3etoArray\x3c/code\x3e that takes 2 values and returns these values in an array. \x3ccode\x3etoArray(5,\x26nbsp;9)\x3c/code\x3e should return the array \x3ccode\x3e[5,\x26nbsp;9]\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof toArray&&(toArray=void 0)},tests:[function(){var a="function"===typeof toArray;return{ok:a,msg:a?"\x3ccode\x3etoArray\x3c/code\x3e is a function.":"\x3ccode\x3etoArray\x3c/code\x3e is not a funktion."}},function(){var a=2===toArray.length;return{ok:a,msg:a?"\x3ccode\x3etoArray\x3c/code\x3e has 2 parameters.":"\x3ccode\x3etoArray\x3c/code\x3e has not 2, but "+toArray.length+" parameters."}},function(){var a,b,d;try{var c=toArray(1,2);b=(a=Array.isArray(c))?
"\x3ccode\x3etoArray(1, 2)\x3c/code\x3e returns an array.":"\x3ccode\x3etoArray(1, 2)\x3c/code\x3e does not return an array."}catch(e){a=!1,b="Error when calling \x3ccode\x3etoArray(1, 2)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=toArray(1,2);b=(a=2===c.length&&1===c[0]&&2===c[1])?"\x3ccode\x3etoArray(1, 2)\x3c/code\x3e returns \x3ccode\x3e[1, 2]\x3c/code\x3e.":"\x3ccode\x3etoArray(1, 2)\x3c/code\x3e does not return \x3ccode\x3e[1, 2]\x3c/code\x3e, but \x3ccode\x3e"+
JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3etoArray(1, 2)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=toArray("Tom","Huckleberry");b=(a=Array.isArray(c)&&2===c.length&&"Tom"===c[0]&&"Huckleberry"===c[1])?'\x3ccode\x3etoArray("Tom", "Huck")\x3c/code\x3e returns \x3ccode\x3e["Tom", "Huck"]\x3c/code\x3e.':'\x3ccode\x3etoArray("Tom", "Huck")\x3c/code\x3e does not return \x3ccode\x3e["Tom", "Huck"]\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+
"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling toArray("Tom", "Huck")\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"array2",title:"Get array elements",lesson:'The elements of an array are accessed by an index beginning with 0. \x3cpre\x3e\x3ccode\x3evar languages \x3d ["C", "C++", "Java"];\x3cbr\x3evar c \x3d languages[0];\x3cbr\x3evar cPlusPlus \x3d languages[1];\x3cbr\x3evar java \x3d languages[2];\x3c/code\x3e\x3c/pre\x3e',task:"Write a function \x3ccode\x3egetFirstElement\x3c/code\x3e that takes an array and returns the first element of the array. \x3ccode\x3egetFirstElement([1, 2])\x3c/code\x3e should return \x3ccode\x3e1\x3c/code\x3e.",beforeTests:function(){"undefined"!==
typeof getFirstElement&&(getFirstElement=void 0)},tests:[function(){var a="function"===typeof getFirstElement;return{ok:a,msg:a?"\x3ccode\x3egetFirstElement\x3c/code\x3e is a function.":"\x3ccode\x3egetFirstElement\x3c/code\x3e is not a function."}},function(){var a=1===getFirstElement.length;return{ok:a,msg:a?"\x3ccode\x3egetFirstElement\x3c/code\x3e has 1 parameter.":"\x3ccode\x3egetFirstElement\x3c/code\x3e has not 1 parameter, but "+getFirstElement.length+"."}},function(){var a,b,d;try{var c=
getFirstElement([1,2]);b=(a=1===c)?"\x3ccode\x3egetFirstElement([1, 2])\x3c/code\x3e returns \x3ccode\x3e1\x3c/code\x3e.":"\x3ccode\x3egetFirstElement([1, 2])\x3c/code\x3e does not return \x3ccode\x3e1\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3egetFirstElement([1, 2])\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,b,d;try{var c=getFirstElement(["Firefox","Chrome"]);b=(a="Firefox"===c)?'\x3ccode\x3egetFirstElement(["Firefox", "Chrome"])\x3c/code\x3e returns \x3ccode\x3e"Firefox"\x3c/code\x3e.':
'\x3ccode\x3egetFirstElement(["Firefox", "Chrome"])\x3c/code\x3e does not return \x3ccode\x3e"Firefox"\x3c/code\x3e, but \x3ccode\x3e'+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b='Error when calling \x3ccode\x3egetFirstElement(["Firefox", "Chrome"])\x3c/code\x3e.',d=e}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"array3",title:"Set array elements",lesson:'Just as you can get array elements by an index, you can set them by this index. It does not matter whether the array was previously filled or empty.\x3cpre\x3e\x3ccode\x3evar languages \x3d [];\x3cbr\x3esprachen[0] \x3d "C";\x3cbr\x3esprachen[1] \x3d "C++";\x3cbr\x3esprachen[2] \x3d "Java";\x3cbr\x3e\x3c/code\x3e\x3c/pre\x3eHere an empty array is filled successively with the listed values.',task:"Write a function \x3ccode\x3esetFirstElement\x3c/code\x3e, that takes an array and an arbitrary variable. The variable should be inserted as the first element in the array. The array should be returned. \x3ccode\x3esetFirstElement([1, 2], 3)\x3c/code\x3e should return \x3ccode\x3e[3, 2]\x3c/code\x3e.",
beforeTests:function(){"undefined"!==typeof setFirstElement&&(setFirstElement=void 0)},tests:[function(){var a="function"===typeof setFirstElement;return{ok:a,msg:a?"\x3ccode\x3esetFirstElement\x3c/code\x3e is a function.":"\x3ccode\x3esetFirstElement\x3c/code\x3e is not a function."}},function(){var a=2===setFirstElement.length;return{ok:a,msg:a?"\x3ccode\x3esetFirstElement\x3c/code\x3e has 2 parameters.":"\x3ccode\x3esetFirstElement\x3c/code\x3e has not 2 parameters, but "+setFirstElement.length+
"."}},function(){var a,b,d;try{var c=setFirstElement([1,2],3);b=(a=Array.isArray(c)&&2===c.length&&3===c[0]&&2===c[1])?"\x3ccode\x3esetFirstElement([1, 2], 3)\x3c/code\x3e returns \x3ccode\x3e[3, 2]\x3c/code\x3e.":"\x3ccode\x3esetFirstElement([1, 2], 3)\x3c/code\x3e does not return \x3ccode\x3e[3, 2]\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){a=!1,b="Error when calling \x3ccode\x3esetFirstElement([1, 2], 3)\x3c/code\x3e.",d=e}return{ok:a,msg:b,e:d}},function(){var a,
b,d;try{var c=setFirstElement([],1);b=(a=Array.isArray(c)&&1===c.length&&1===c[0])?"\x3ccode\x3esetFirstElement([], 1)\x3c/code\x3e returns \x3ccode\x3e[1]\x3c/code\x3e.":"\x3ccode\x3esetFirstElement([], 1)\x3c/code\x3e does not return \x3ccode\x3e[1]\x3c/code\x3e, but \x3ccode\x3e"+JSON.stringify(c)+"\x3c/code\x3e."}catch(e){d=e,a=!1,b="Error when calling \x3ccode\x3esetFirstElement([], 1)\x3c/code\x3e."}return{ok:a,msg:b,e:d}}]});
jshero.koans.add({id:"further",title:"To be continued ...",lesson:"JavaScript Hero will be continued.",task:"Further exercises will follow.",beforeTests:function(){},tests:[]});